{"version":3,"sources":["generators/server/Application.Config/application.view-toolbar.njs.js"],"names":["code","text","expression"],"mappings":"AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IACCA;AADD,IACCA,AACAA;AAFD,IAECA,AACAA;AAHD,IAGCA,AACAA;AAJD,IAICA,AACAA;AALD,IAKCA,AACAA;AAND,IAMCA,AACAA;AAPD,IAOCA,AAAEC,IACFA,IACAA,+BAA6BC,cAAeA,6BAA8BD,gBAC1EA,oCACAA,mBAAiBC,4BAA6BA,2CAA4CD,aAC1FA,oBACAA,IACAA,iCACAA,4FACAA,kFAAgFC,cAAeD,mBAAiBC,6BAA8BD,SAC9IA,IACAA,yBACAA,eACID;AApBL,IAoBKA,AACJA;AArBD,IAqBCA,AACAA;AAtBD,IAsBCA,AAAuEC,IACvEA,QAAMC,0BAA2BD,GAC7BD;AAxBL,IAwBKA,AAAOC,IACXA,IACAA,6BACAA,eACMD;AA5BP,IA4BOA,AACNC,GACAA,4BACAA,qDACAA,mBACAA,2DACAA,8DACAA,2BACAA,6CACAA,oDACAA,wBACAA,kBACAA,0BACAA,6CACAA,qFAAmFC,cAAeD,mBAAiBC,6BAA8BD,sCACjJA,kDACAA,2CACAA,iDACAA,oDACAA,kCACAA,wDACAA,kEACAA,mBACAA,yBACAA,0BACAA,0DACAA,uDACAA,8DACAA,kCACAA,2BACAA,qBACAA,0DACAA,kBACAA,gBACAA,cACAA,YACAA,QAAMD;AAhEP,IAgEOA,AAAKC,IACXA,WACAA,4BACAA,oDACAA,6BACAA,4BACAA,4BACAA,gCACAA,wBACAA,uBACAA,yCACAA,uBACAA,wBACAA,cACAA,wBACAA,iCACAA,uFAAqFC,cAAeD,mBAAiBC,6BAA8BD,SACnJA,eACAA,aACAA,YACAA,aACAA,8BACAA,sEACAA,4EACAA,qBACAA,iBACAA,kCACAA,0EACAA,yCACAA,gFACAA,kCACAA,8BACAA,uCACAA,qGAAmGC,cAAeD,mBAAiBC,6BAA8BD,SACjKA,qBACAA,mBACAA,kBACAA,iBACAA,kCACAA,qEACAA,4CACAA,8BACAA,uCACAA,8CACAA,6BACAA,8BACAA,oBACAA,kCACAA,2DACAA,wCACAA,qGAAmGC,cAAeD,mBAAiBC,6BAA8BD,SACjKA,+EACAA,oBACAA,kBACAA,iBACAA,kCACAA,4EACAA,8CACAA,8BACAA,8CACAA,uCACAA,6BACAA,8BACAA,oBACAA,kCACAA,mEACAA,wCACAA,uGAAqGC,cAAeD,mBAAiBC,6BAA8BD,SACnKA,sCACAA,iDACAA,qCACAA,4CACAA,gDACAA,wBACAA,oDACAA,sCACAA,4DACAA,kEACAA,yBACAA,wBACAA,sBACAA,oBACAA,kBACAA,iBACAA,kCACAA,gEACAA,uCACAA,sEACAA,kCACAA,8BACAA,kCACAA,kGAAgGC,cAAeD,mBAAiBC,6BAA8BD,SAC9JA,qDACAA,sBACAA,oBACAA,kBACAA,iBACAA,kCACAA,kEACAA,yCACAA,wEACAA,kCACAA,8BACAA,kCACAA,oGAAkGC,cAAeD,mBAAiBC,6BAA8BD,SAChKA,4DACAA,sBACAA,oBACAA,kBACAA,iBACAA,kCACAA,iEACAA,wCACAA,uEACAA,kCACAA,8BACAA,kCACAA,mGAAiGC,cAAeD,mBAAiBC,6BAA8BD,SAC/JA,2DACAA,sBACAA,oBACAA,kBACAA,gBACAA,cACAA,WACAA,WACAA,IACAA,mCACAA,OACAA;AAjfile":"generators/server/Application.Config/application.view-toolbar.njs.js","sourceRoot":"/Users/vedmalex/work/fte2/demo","sourcesContent":["<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"],"template":{"version":"1.0.0","segments":[{"generatedLine":1,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":2,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":3,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":4,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":5,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":6,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":7,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":8,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":9,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":10,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":11,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":12,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":13,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":14,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":15,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":16,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":17,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":18,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":19,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":20,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":21,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":22,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":23,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":24,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":25,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":26,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":27,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":28,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":29,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":30,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":31,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":32,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":33,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":34,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":35,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":36,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":37,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":38,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":39,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":40,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":41,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":42,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":43,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":44,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":45,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":46,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":47,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":48,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":49,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":50,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":51,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":52,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":53,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":54,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":55,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":56,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":57,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":58,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":59,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":60,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":61,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":62,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":63,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":64,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":65,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":66,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":67,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":68,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":69,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":70,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":71,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":72,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":73,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":74,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":75,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":76,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":77,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":78,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":79,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":80,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":81,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":82,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":83,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":84,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":85,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":86,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":87,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":88,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":89,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":90,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":91,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":92,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":93,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":94,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":95,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":96,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":97,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":98,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":99,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":100,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":101,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":102,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":103,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":104,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":105,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":106,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":107,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":108,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":109,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":110,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":111,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":112,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":113,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":114,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":115,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":116,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":117,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":118,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":119,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":120,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":121,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":122,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":123,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":124,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":125,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":126,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":127,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":128,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":129,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":130,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":131,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":132,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":133,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":134,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":135,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":136,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":137,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":138,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":139,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":140,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":141,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":142,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":143,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":144,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":145,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":146,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":147,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":148,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":149,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":150,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":151,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":152,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":153,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":154,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":155,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":156,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":157,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":158,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":159,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":160,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":161,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":162,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":163,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":164,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":165,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":166,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":167,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":168,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":169,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":170,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":171,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":172,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":173,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":174,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":175,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":176,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":177,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":178,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":179,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":180,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":181,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":182,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":183,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":184,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":185,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":186,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":187,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":188,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":189,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":190,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":191,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":192,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":193,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":194,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":195,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":196,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":197,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":198,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":199,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":200,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":201,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":202,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":203,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":204,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":205,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":206,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":207,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":208,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":209,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":210,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":211,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":212,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":213,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.view-toolbar.njs.js"},{"generatedLine":8,"generatedColumn":4,"originalLine":2,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":9,"generatedColumn":4,"originalLine":2,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":9,"generatedColumn":4,"originalLine":3,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":10,"generatedColumn":4,"originalLine":3,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":10,"generatedColumn":4,"originalLine":4,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":11,"generatedColumn":4,"originalLine":4,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":11,"generatedColumn":4,"originalLine":5,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":12,"generatedColumn":4,"originalLine":5,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":12,"generatedColumn":4,"originalLine":6,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":4,"originalLine":6,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":4,"originalLine":7,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":4,"originalLine":7,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":4,"originalLine":8,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":15,"generatedColumn":4,"originalLine":8,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":15,"generatedColumn":4,"originalLine":8,"originalColumn":3,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":15,"generatedColumn":8,"originalLine":9,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":15,"generatedColumn":12,"originalLine":10,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":15,"generatedColumn":43,"originalLine":10,"originalColumn":30,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":15,"generatedColumn":57,"originalLine":10,"originalColumn":45,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":15,"generatedColumn":86,"originalLine":10,"originalColumn":75,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":15,"generatedColumn":102,"originalLine":11,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":15,"generatedColumn":138,"originalLine":12,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":15,"generatedColumn":157,"originalLine":12,"originalColumn":18,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":15,"generatedColumn":185,"originalLine":12,"originalColumn":47,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":15,"generatedColumn":228,"originalLine":12,"originalColumn":91,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":15,"generatedColumn":241,"originalLine":13,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":15,"generatedColumn":261,"originalLine":14,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":15,"generatedColumn":265,"originalLine":15,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":15,"generatedColumn":298,"originalLine":16,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":15,"generatedColumn":390,"originalLine":17,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":15,"generatedColumn":472,"originalLine":17,"originalColumn":81,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":15,"generatedColumn":486,"originalLine":17,"originalColumn":96,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":15,"generatedColumn":505,"originalLine":17,"originalColumn":113,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":15,"generatedColumn":534,"originalLine":17,"originalColumn":143,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":15,"generatedColumn":543,"originalLine":18,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":15,"generatedColumn":547,"originalLine":19,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":15,"generatedColumn":572,"originalLine":20,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":15,"generatedColumn":587,"originalLine":21,"originalColumn":5,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":16,"generatedColumn":4,"originalLine":21,"originalColumn":5,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":16,"generatedColumn":4,"originalLine":22,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":17,"generatedColumn":4,"originalLine":22,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":17,"generatedColumn":4,"originalLine":23,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":18,"generatedColumn":4,"originalLine":23,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":18,"generatedColumn":4,"originalLine":23,"originalColumn":72,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":18,"generatedColumn":8,"originalLine":24,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":18,"generatedColumn":16,"originalLine":24,"originalColumn":7,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":18,"generatedColumn":42,"originalLine":24,"originalColumn":34,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":18,"generatedColumn":45,"originalLine":25,"originalColumn":5,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":19,"generatedColumn":4,"originalLine":25,"originalColumn":5,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":19,"generatedColumn":4,"originalLine":25,"originalColumn":12,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":19,"generatedColumn":8,"originalLine":26,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":19,"generatedColumn":12,"originalLine":27,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":19,"generatedColumn":41,"originalLine":28,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":19,"generatedColumn":56,"originalLine":29,"originalColumn":7,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":20,"generatedColumn":4,"originalLine":29,"originalColumn":7,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":20,"generatedColumn":4,"originalLine":30,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":20,"generatedColumn":7,"originalLine":31,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":20,"generatedColumn":35,"originalLine":32,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":20,"generatedColumn":88,"originalLine":33,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":20,"generatedColumn":107,"originalLine":34,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":20,"generatedColumn":166,"originalLine":35,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":20,"generatedColumn":228,"originalLine":36,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":20,"generatedColumn":255,"originalLine":37,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":20,"generatedColumn":300,"originalLine":38,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":20,"generatedColumn":352,"originalLine":39,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":20,"generatedColumn":376,"originalLine":40,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":20,"generatedColumn":394,"originalLine":41,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":20,"generatedColumn":420,"originalLine":42,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":20,"generatedColumn":465,"originalLine":43,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":20,"generatedColumn":550,"originalLine":43,"originalColumn":84,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":20,"generatedColumn":564,"originalLine":43,"originalColumn":99,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":20,"generatedColumn":583,"originalLine":43,"originalColumn":116,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":20,"generatedColumn":612,"originalLine":43,"originalColumn":146,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":20,"generatedColumn":650,"originalLine":44,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":20,"generatedColumn":700,"originalLine":45,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":20,"generatedColumn":743,"originalLine":46,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":20,"generatedColumn":792,"originalLine":47,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":20,"generatedColumn":844,"originalLine":48,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":20,"generatedColumn":878,"originalLine":49,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":20,"generatedColumn":934,"originalLine":50,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":20,"generatedColumn":1000,"originalLine":51,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":20,"generatedColumn":1019,"originalLine":52,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":20,"generatedColumn":1044,"originalLine":53,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":20,"generatedColumn":1070,"originalLine":54,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":20,"generatedColumn":1128,"originalLine":55,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":20,"generatedColumn":1183,"originalLine":56,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":20,"generatedColumn":1245,"originalLine":57,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":20,"generatedColumn":1279,"originalLine":58,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":20,"generatedColumn":1306,"originalLine":59,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":20,"generatedColumn":1327,"originalLine":60,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":20,"generatedColumn":1385,"originalLine":61,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":20,"generatedColumn":1403,"originalLine":62,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":20,"generatedColumn":1419,"originalLine":63,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":20,"generatedColumn":1433,"originalLine":64,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":20,"generatedColumn":1445,"originalLine":65,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":20,"generatedColumn":1453,"originalLine":65,"originalColumn":7,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":4,"originalLine":65,"originalColumn":7,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":4,"originalLine":65,"originalColumn":12,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":8,"originalLine":66,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":19,"originalLine":67,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":47,"originalLine":68,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":99,"originalLine":69,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":128,"originalLine":70,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":156,"originalLine":71,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":184,"originalLine":72,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":216,"originalLine":73,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":240,"originalLine":74,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":263,"originalLine":75,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":304,"originalLine":76,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":327,"originalLine":77,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":351,"originalLine":78,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":365,"originalLine":79,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":389,"originalLine":80,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":422,"originalLine":81,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":509,"originalLine":81,"originalColumn":86,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":523,"originalLine":81,"originalColumn":101,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":542,"originalLine":81,"originalColumn":118,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":571,"originalLine":81,"originalColumn":148,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":580,"originalLine":82,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":595,"originalLine":83,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":608,"originalLine":84,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":620,"originalLine":85,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":633,"originalLine":86,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":663,"originalLine":87,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":733,"originalLine":88,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":809,"originalLine":89,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":830,"originalLine":90,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":847,"originalLine":91,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":881,"originalLine":92,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":955,"originalLine":93,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":996,"originalLine":94,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":1076,"originalLine":95,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":1110,"originalLine":96,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":1140,"originalLine":97,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":1179,"originalLine":98,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":1280,"originalLine":98,"originalColumn":100,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":1294,"originalLine":98,"originalColumn":115,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":1313,"originalLine":98,"originalColumn":132,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":1342,"originalLine":98,"originalColumn":162,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":1351,"originalLine":99,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":1372,"originalLine":100,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":1391,"originalLine":101,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":1409,"originalLine":102,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":1426,"originalLine":103,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":1460,"originalLine":104,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":1529,"originalLine":105,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":1573,"originalLine":106,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":1603,"originalLine":107,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":1642,"originalLine":108,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":1688,"originalLine":109,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":1717,"originalLine":110,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":1747,"originalLine":111,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":1767,"originalLine":112,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":1801,"originalLine":113,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":1860,"originalLine":114,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":1900,"originalLine":115,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":2001,"originalLine":115,"originalColumn":100,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":2015,"originalLine":115,"originalColumn":115,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":2034,"originalLine":115,"originalColumn":132,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":2063,"originalLine":115,"originalColumn":162,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":2072,"originalLine":116,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":2151,"originalLine":117,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":2171,"originalLine":118,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":2189,"originalLine":119,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":2206,"originalLine":120,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":2240,"originalLine":121,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":2316,"originalLine":122,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":2362,"originalLine":123,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":2392,"originalLine":124,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":2438,"originalLine":125,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":2477,"originalLine":126,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":2506,"originalLine":127,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":2536,"originalLine":128,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":2556,"originalLine":129,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":2590,"originalLine":130,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":2657,"originalLine":131,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":2697,"originalLine":132,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":2800,"originalLine":132,"originalColumn":102,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":2814,"originalLine":132,"originalColumn":117,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":2833,"originalLine":132,"originalColumn":134,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":2862,"originalLine":132,"originalColumn":164,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":2871,"originalLine":133,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":2909,"originalLine":134,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":2958,"originalLine":135,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":2995,"originalLine":136,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":3039,"originalLine":137,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":3087,"originalLine":138,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":3111,"originalLine":139,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":3163,"originalLine":140,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":3201,"originalLine":141,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":3261,"originalLine":142,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":3327,"originalLine":143,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":3352,"originalLine":144,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":3376,"originalLine":145,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":3398,"originalLine":146,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":3418,"originalLine":147,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":3436,"originalLine":148,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":3453,"originalLine":149,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":3487,"originalLine":150,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":3551,"originalLine":151,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":3590,"originalLine":152,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":3660,"originalLine":153,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":3694,"originalLine":154,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":3724,"originalLine":155,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":3758,"originalLine":156,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":3856,"originalLine":156,"originalColumn":97,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":3870,"originalLine":156,"originalColumn":112,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":3889,"originalLine":156,"originalColumn":129,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":3918,"originalLine":156,"originalColumn":159,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":3927,"originalLine":157,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":3980,"originalLine":158,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":4002,"originalLine":159,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":4022,"originalLine":160,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":4040,"originalLine":161,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":4057,"originalLine":162,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":4091,"originalLine":163,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":4157,"originalLine":164,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":4198,"originalLine":165,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":4270,"originalLine":166,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":4304,"originalLine":167,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":4334,"originalLine":168,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":4368,"originalLine":169,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":4468,"originalLine":169,"originalColumn":99,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":4482,"originalLine":169,"originalColumn":114,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":4501,"originalLine":169,"originalColumn":131,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":4530,"originalLine":169,"originalColumn":161,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":4539,"originalLine":170,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":4599,"originalLine":171,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":4621,"originalLine":172,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":4641,"originalLine":173,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":4659,"originalLine":174,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":4676,"originalLine":175,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":4710,"originalLine":176,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":4775,"originalLine":177,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":4815,"originalLine":178,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":4886,"originalLine":179,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":4920,"originalLine":180,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":4950,"originalLine":181,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":4984,"originalLine":182,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":5083,"originalLine":182,"originalColumn":98,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":5097,"originalLine":182,"originalColumn":113,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":5116,"originalLine":182,"originalColumn":130,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":5145,"originalLine":182,"originalColumn":160,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":5154,"originalLine":183,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":5213,"originalLine":184,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":5235,"originalLine":185,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":5255,"originalLine":186,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":5273,"originalLine":187,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":5289,"originalLine":188,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":5303,"originalLine":189,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":5314,"originalLine":190,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":5325,"originalLine":191,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":5329,"originalLine":192,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":5364,"originalLine":193,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":21,"generatedColumn":5371,"originalLine":194,"originalColumn":1,"source":"generators/server/Application.Config/application.view-toolbar.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  context.currentProfile.toolBarItem.sort(function(a, b){\n    if(a !== undefined && b !== undefined)\n      return a.itemIndex - b.itemIndex;\n    return 0;\n  });\n#>\n\nExt.define('Modeleditor.view.#{context.name}#{context.currentProfile.name}.ToolBar', {\n  extend: 'Ext.toolbar.Toolbar',\n  alias: 'widget.#{context.name.toLowerCase()}#{context.currentProfile.name.toLowerCase()}toolbar',\n  dock: \"top\",\n\n  initComponent: function() {\n    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n\n    Ext.apply(this, {\n      items:[\n    <#- for(let i=0; i<context.currentProfile?.toolBarItem?.length ?? -1; i++){\n      let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);\n      settings.itemId = context.currentProfile.toolBarItem[i].itemId #>\n      #{JSON.stringify(settings)},\n    <#- }#>\n\n      /* DEFAULT ITEMS */\n      \"->\",\n      <#- if(!context.noTranslationTools) {-#>\n      {\n        xtype: 'button',\n        iconCls: `gi-lang_${currentLocale.code}`,\n        menu: {\n          items: globalThis.AVAILABLE_LANGUAGES.filter(\n            l => l.code != globalThis.CURRENT_LOCALE.code,\n          ).map(l => ({\n            iconCls: `gi-lang_${l.code}`,\n            text: `${l.nativeName} (${l.code})`,\n            data: l,\n          })),\n          listeners: {\n            click(menu, item, e, eOpts) {\n              DirectCacheLogger.userStories('Language Change', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}', newLanguage: item.data.code });\n              const button = this.up('button')\n              button.setText(item.text)\n              button.setIconCls(item.iconCls)\n              globalThis._tChangeLang(item.data)\n              menu.removeAll()\n              globalThis.AVAILABLE_LANGUAGES.filter(\n                l => l.code != globalThis.CURRENT_LOCALE.code,\n              )\n                .map(\n                  l =>\n                    new Ext.createWidget('menuitem', {\n                      iconCls: `gi-lang_${l.code}`,\n                      text: `${l.nativeName} (${l.code})`,\n                      data: l,\n                    }),\n                )\n                .forEach(item => menu.items.add(item))\n            },\n          },\n        },\n      },\n      <#}#>\n      {\n        xtype: 'button',\n        text: _t('Logout', 'SYSTEM', 'buttons'),\n        itemId: 'logout',\n        scale: 'medium',\n        href: '/logout',\n        hrefTarget: '_self',\n        iconCls: _r(\n          'Logout',\n          'icon-signout medium-icon',\n          'SYSTEM',\n          'iconCls',\n        ),\n        listeners: {\n          click: function() {\n            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n          }\n        }\n      },\n        {\n          xtype: 'button',\n          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n          menu: [\n            {\n              xtype: 'button',\n              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n              itemId: 'showUserInfo',\n              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: function() {\n                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                }\n              }\n            },\n            {\n              xtype: 'button',\n              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n              itemId: 'impersonateUser',\n              iconCls: _r(\n                'Impersonate User',\n                'gi-fa_solid_user-secret',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isAdmin'),\n              handler: function () {\n                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n              itemId: 'revertImpersonate',\n              iconCls: _r(\n                'Return to Original User',\n                'gi-fa_solid_user',\n                'SYSTEM',\n                'iconCls',\n              ),\n              scale: 'medium',\n              hidden: !Ext.util.Cookies.get('isImpersonating'),\n              handler: function () {\n                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                Ext.Ajax.request({\n                  url: '/impersonate/revert',\n                  method: 'POST',\n                  success: function () {\n                    window.location.reload()\n                  },\n                  failure: function (response) {\n                    Ext.Msg.alert(\n                      _t('Error', 'SYSTEM', 'messages'),\n                      Ext.decode(response.responseText).error,\n                    )\n                  },\n                })\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n              itemId: 'clearCache',\n              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.clear()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStart',\n              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.startCapture()\n                },\n              },\n            },\n            {\n              xtype: 'button',\n              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n              itemId: 'captureStop',\n              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n              scale: 'medium',\n              listeners: {\n                click: () => {\n                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '#{context.name}', profileName: '#{context.currentProfile.name}' });\n                  Workspace.DirectCatcher.stopCapture()\n                },\n              },\n            },\n          ],\n        },\n      ]\n    });\n\n    this.callParent(arguments);\n  }\n});"}]}}