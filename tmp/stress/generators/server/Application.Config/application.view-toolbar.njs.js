module.exports = {
    script: function(context, _content, partial, slot, options) {
        var out = [];
        context.currentProfile.toolBarItem.sort(function(a, b) {
            if (a !== undefined && b !== undefined) return a.itemIndex - b.itemIndex;
            return 0;
        });
        out.push("\n");
        out.push("\n");
        out.push("Ext.define('Modeleditor.view." + (context.name) + (context.currentProfile.name) + ".ToolBar', {\n");
        out.push("  extend: 'Ext.toolbar.Toolbar',\n");
        out.push("  alias: 'widget." + (context.name.toLowerCase()) + (context.currentProfile.name.toLowerCase()) + "toolbar',\n");
        out.push("  dock: \"top\",\n");
        out.push("\n");
        out.push("  initComponent: function() {\n");
        out.push("    const currentLocale = globalThis.CURRENT_LOCALE || globalThis.AVAILABLE_LANGUAGES[0]\n");
        out.push("    DirectCacheLogger.userStories('Toolbar Init Component', { applicationName: '" + (context.name) + "', profileName: '" + (context.currentProfile.name) + "' });\n");
        out.push("\n");
        out.push("    Ext.apply(this, {\n");
        out.push("      items:[");
        for(let i = 0; i < context.currentProfile?.toolBarItem?.length ?? -1; i++){
            let settings = JSON.parse(context.currentProfile.toolBarItem[i].settings);
            settings.itemId = context.currentProfile.toolBarItem[i].itemId;
            out.push("\n");
            out.push("      " + (JSON.stringify(settings)) + ",");
        }
        out.push("\n");
        out.push("\n");
        out.push("      /* DEFAULT ITEMS */\n");
        out.push("      \"->\",");
        if (!context.noTranslationTools) {
            out.push("{" + "        xtype: 'button',\n");
            out.push("        iconCls: `gi-lang_${currentLocale.code}`,\n");
            out.push("        menu: {\n");
            out.push("          items: globalThis.AVAILABLE_LANGUAGES.filter(\n");
            out.push("            l => l.code != globalThis.CURRENT_LOCALE.code,\n");
            out.push("          ).map(l => ({\n");
            out.push("            iconCls: `gi-lang_${l.code}`,\n");
            out.push("            text: `${l.nativeName} (${l.code})`,\n");
            out.push("            data: l,\n");
            out.push("          })),\n");
            out.push("          listeners: {\n");
            out.push("            click(menu, item, e, eOpts) {\n");
            out.push("              DirectCacheLogger.userStories('Language Change', { applicationName: '" + (context.name) + "', profileName: '" + (context.currentProfile.name) + "', newLanguage: item.data.code });\n");
            out.push("              const button = this.up('button')\n");
            out.push("              button.setText(item.text)\n");
            out.push("              button.setIconCls(item.iconCls)\n");
            out.push("              globalThis._tChangeLang(item.data)\n");
            out.push("              menu.removeAll()\n");
            out.push("              globalThis.AVAILABLE_LANGUAGES.filter(\n");
            out.push("                l => l.code != globalThis.CURRENT_LOCALE.code,\n");
            out.push("              )\n");
            out.push("                .map(\n");
            out.push("                  l =>\n");
            out.push("                    new Ext.createWidget('menuitem', {\n");
            out.push("                      iconCls: `gi-lang_${l.code}`,\n");
            out.push("                      text: `${l.nativeName} (${l.code})`,\n");
            out.push("                      data: l,\n");
            out.push("                    }),\n");
            out.push("                )\n");
            out.push("                .forEach(item => menu.items.add(item))\n");
            out.push("            },\n");
            out.push("          },\n");
            out.push("        },\n");
            out.push("      },\n");
            out.push("      ");
        }
        out.push("\n");
        out.push("      {\n");
        out.push("        xtype: 'button',\n");
        out.push("        text: _t('Logout', 'SYSTEM', 'buttons'),\n");
        out.push("        itemId: 'logout',\n");
        out.push("        scale: 'medium',\n");
        out.push("        href: '/logout',\n");
        out.push("        hrefTarget: '_self',\n");
        out.push("        iconCls: _r(\n");
        out.push("          'Logout',\n");
        out.push("          'icon-signout medium-icon',\n");
        out.push("          'SYSTEM',\n");
        out.push("          'iconCls',\n");
        out.push("        ),\n");
        out.push("        listeners: {\n");
        out.push("          click: function() {\n");
        out.push("            DirectCacheLogger.userStories('Logout Button Click', { applicationName: '" + (context.name) + "', profileName: '" + (context.currentProfile.name) + "' });\n");
        out.push("          }\n");
        out.push("        }\n");
        out.push("      },\n");
        out.push("        {\n");
        out.push("          xtype: 'button',\n");
        out.push("          text: _t('current session info?', 'SYSTEM', 'toolbars'),\n");
        out.push("          iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n");
        out.push("          menu: [\n");
        out.push("            {\n");
        out.push("              xtype: 'button',\n");
        out.push("              text: _t('current session info?', 'SYSTEM', 'toolbars'),\n");
        out.push("              itemId: 'showUserInfo',\n");
        out.push("              iconCls: _r('current session info?', '', 'SYSTEM', 'iconCls'),\n");
        out.push("              scale: 'medium',\n");
        out.push("              listeners: {\n");
        out.push("                click: function() {\n");
        out.push("                  DirectCacheLogger.userStories('Show User Info Button Click', { applicationName: '" + (context.name) + "', profileName: '" + (context.currentProfile.name) + "' });\n");
        out.push("                }\n");
        out.push("              }\n");
        out.push("            },\n");
        out.push("            {\n");
        out.push("              xtype: 'button',\n");
        out.push("              text: _t('Impersonate User', 'SYSTEM', 'toolbars'),\n");
        out.push("              itemId: 'impersonateUser',\n");
        out.push("              iconCls: _r(\n");
        out.push("                'Impersonate User',\n");
        out.push("                'gi-fa_solid_user-secret',\n");
        out.push("                'SYSTEM',\n");
        out.push("                'iconCls',\n");
        out.push("              ),\n");
        out.push("              scale: 'medium',\n");
        out.push("              hidden: !Ext.util.Cookies.get('isAdmin'),\n");
        out.push("              handler: function () {\n");
        out.push("                DirectCacheLogger.userStories('Impersonate User Button Click', { applicationName: '" + (context.name) + "', profileName: '" + (context.currentProfile.name) + "' });\n");
        out.push("                Ext.create('Modeleditor.view.Admin.ImpersonateForm').show()\n");
        out.push("              },\n");
        out.push("            },\n");
        out.push("            {\n");
        out.push("              xtype: 'button',\n");
        out.push("              text: _t('Return to Original User', 'SYSTEM', 'toolbars'),\n");
        out.push("              itemId: 'revertImpersonate',\n");
        out.push("              iconCls: _r(\n");
        out.push("                'Return to Original User',\n");
        out.push("                'gi-fa_solid_user',\n");
        out.push("                'SYSTEM',\n");
        out.push("                'iconCls',\n");
        out.push("              ),\n");
        out.push("              scale: 'medium',\n");
        out.push("              hidden: !Ext.util.Cookies.get('isImpersonating'),\n");
        out.push("              handler: function () {\n");
        out.push("                DirectCacheLogger.userStories('Revert Impersonate Button Click', { applicationName: '" + (context.name) + "', profileName: '" + (context.currentProfile.name) + "' });\n");
        out.push("                Ext.Ajax.request({\n");
        out.push("                  url: '/impersonate/revert',\n");
        out.push("                  method: 'POST',\n");
        out.push("                  success: function () {\n");
        out.push("                    window.location.reload()\n");
        out.push("                  },\n");
        out.push("                  failure: function (response) {\n");
        out.push("                    Ext.Msg.alert(\n");
        out.push("                      _t('Error', 'SYSTEM', 'messages'),\n");
        out.push("                      Ext.decode(response.responseText).error,\n");
        out.push("                    )\n");
        out.push("                  },\n");
        out.push("                })\n");
        out.push("              },\n");
        out.push("            },\n");
        out.push("            {\n");
        out.push("              xtype: 'button',\n");
        out.push("              text: _t('Clear Cache', 'SYSTEM', 'toolbars'),\n");
        out.push("              itemId: 'clearCache',\n");
        out.push("              iconCls: _r('Clear Cache', '', 'SYSTEM', 'iconCls'),\n");
        out.push("              scale: 'medium',\n");
        out.push("              listeners: {\n");
        out.push("                click: () => {\n");
        out.push("                  DirectCacheLogger.userStories('Clear Cache Button Click', { applicationName: '" + (context.name) + "', profileName: '" + (context.currentProfile.name) + "' });\n");
        out.push("                  Workspace.DirectCatcher.clear()\n");
        out.push("                },\n");
        out.push("              },\n");
        out.push("            },\n");
        out.push("            {\n");
        out.push("              xtype: 'button',\n");
        out.push("              text: _t('Capture Start', 'SYSTEM', 'toolbars'),\n");
        out.push("              itemId: 'captureStart',\n");
        out.push("              iconCls: _r('Capture Start', '', 'SYSTEM', 'iconCls'),\n");
        out.push("              scale: 'medium',\n");
        out.push("              listeners: {\n");
        out.push("                click: () => {\n");
        out.push("                  DirectCacheLogger.userStories('Capture Start Button Click', { applicationName: '" + (context.name) + "', profileName: '" + (context.currentProfile.name) + "' });\n");
        out.push("                  Workspace.DirectCatcher.startCapture()\n");
        out.push("                },\n");
        out.push("              },\n");
        out.push("            },\n");
        out.push("            {\n");
        out.push("              xtype: 'button',\n");
        out.push("              text: _t('Capture Stop', 'SYSTEM', 'toolbars'),\n");
        out.push("              itemId: 'captureStop',\n");
        out.push("              iconCls: _r('Capture Stop', '', 'SYSTEM', 'iconCls'),\n");
        out.push("              scale: 'medium',\n");
        out.push("              listeners: {\n");
        out.push("                click: () => {\n");
        out.push("                  DirectCacheLogger.userStories('Capture Stop Button Click', { applicationName: '" + (context.name) + "', profileName: '" + (context.currentProfile.name) + "' });\n");
        out.push("                  Workspace.DirectCatcher.stopCapture()\n");
        out.push("                },\n");
        out.push("              },\n");
        out.push("            },\n");
        out.push("          ],\n");
        out.push("        },\n");
        out.push("      ]\n");
        out.push("    });\n");
        out.push("\n");
        out.push("    this.callParent(arguments);\n");
        out.push("  }\n");
        out.push("});");
        return out.join('');
    },
    compile: function() {},
    dependency: {}
};

//# sourceMappingURL=generators/server/Application.Config/application.view-toolbar.njs.js.map