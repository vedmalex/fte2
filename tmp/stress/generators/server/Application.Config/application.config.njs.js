module.exports = {
    script: function(context, _content, partial, slot, options) {
        var out = [];
        out.push("global.STARTTIME = new Date('" + ((new Date()).toGMTString()) + "');\n");
        out.push("\n");
        out.push("const debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\n");
        out.push("if (debug) {\n");
        out.push("  const { Config } = require('pipeline.js')\n");
        out.push("  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n");
        out.push("}\n");
        out.push("\n");
        out.push("global.SERVERCONFIG =\n");
        out.push("exports.config = {\n");
        out.push("  ssl: process.env.SSL?.toLowerCase() == 'true',\n");
        out.push("  sslConfig: {\n");
        out.push("    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n");
        out.push("    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n");
        out.push("  },\n");
        out.push("  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n");
        out.push("  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n");
        out.push("  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n");
        out.push("  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n");
        out.push("  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n");
        out.push("  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n");
        out.push("  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n");
        out.push("  theme: process.env.THEME,\n");
        out.push("  debug,\n");
        out.push("  RTL: process.env.RTL?.toLowerCase() == 'true',\n");
        out.push("  AppName: process.env.APP_NAME,\n");
        out.push("  language: process.env.LOCALE,\n");
        out.push("  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n");
        out.push("  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n");
        out.push("  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n");
        out.push("    telemetry: {\n");
        out.push("    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n");
        out.push("    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n");
        out.push("    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n");
        out.push("    options: {\n");
        out.push("      file: {\n");
        out.push("        path:\n");
        out.push("          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n");
        out.push("        writeInterval: parseInt(\n");
        out.push("          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n");
        out.push("          10,\n");
        out.push("        ),\n");
        out.push("      },\n");
        out.push("      otlp: {\n");
        out.push("        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n");
        out.push("        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n");
        out.push("      },\n");
        out.push("      console: {\n");
        out.push("        prettyPrint:\n");
        out.push("          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n");
        out.push("          true,\n");
        out.push("      },\n");
        out.push("    },\n");
        out.push("    mongodb: {\n");
        out.push("      enabled:\n");
        out.push("        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n");
        out.push("      enhancedDatabaseReporting:\n");
        out.push("        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n");
        out.push("        true,\n");
        out.push("    },\n");
        out.push("    dataloader: {\n");
        out.push("      enabled:\n");
        out.push("        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n");
        out.push("        true,\n");
        out.push("      enhancedReporting:\n");
        out.push("        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n");
        out.push("        true,\n");
        out.push("    },\n");
        out.push("    mongoose: {\n");
        out.push("      enabled:\n");
        out.push("        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n");
        out.push("        true,\n");
        out.push("      enhancedDatabaseReporting:\n");
        out.push("        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n");
        out.push("        true,\n");
        out.push("    },\n");
        out.push("    graphql: {\n");
        out.push("      enabled:\n");
        out.push("        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n");
        out.push("      allowValues:\n");
        out.push("        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n");
        out.push("        false,\n");
        out.push("      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n");
        out.push("      mergeItems:\n");
        out.push("        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n");
        out.push("        true,\n");
        out.push("      ignoreTrivialResolveSpans:\n");
        out.push("        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n");
        out.push("          'true' ?? true,\n");
        out.push("    },\n");
        out.push("  },\n");
        out.push("  impersonate: {\n");
        out.push("    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n");
        out.push("  },\n");
        out.push("  connections: {\n");
        out.push("    system: process.env.SYSTEM_URL,\n");
        out.push("    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n");
        out.push("    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n");
        out.push("    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n");
        out.push("    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n");
        out.push("    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n");
        out.push("    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n");
        out.push("  },\n");
        out.push("};");
        return out.join('');
    },
    compile: function() {},
    dependency: {}
};

//# sourceMappingURL=generators/server/Application.Config/application.config.njs.js.map