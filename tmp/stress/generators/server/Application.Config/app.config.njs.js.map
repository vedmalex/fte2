{"version":3,"sources":["generators/server/Application.Config/app.config.njs.js"],"names":["text"],"mappings":"AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAiBA,IAChBA,kCACAA,IACAA,gEACAA,gBACAA,+CACAA,8EACAA,KACAA,IACAA,yBACAA,sBACAA,oDACAA,kBACAA,sEACAA,wEACAA,QACAA,yEACAA,qFACAA,qFACAA,0EACAA,0EACAA,0EACAA,oFACAA,+BACAA,YACAA,oDACAA,oCACAA,mCACAA,yEACAA,qDACAA,qDACAA,oBACAA,iFACAA,qEACAA,2FACAA,kBACAA,iBACAA,iBACAA,mFACAA,oCACAA,6DACAA,iBACAA,cACAA,YACAA,iBACAA,8DACAA,4DACAA,YACAA,oBACAA,wBACAA,+EACAA,mBACAA,YACAA,UACAA,kBACAA,kBACAA,oFACAA,oCACAA,+EACAA,iBACAA,UACAA,qBACAA,kBACAA,iFACAA,iBACAA,4BACAA,kFACAA,iBACAA,UACAA,mBACAA,kBACAA,+EACAA,iBACAA,oCACAA,gFACAA,iBACAA,UACAA,kBACAA,kBACAA,oFACAA,sBACAA,mFACAA,kBACAA,0EACAA,qBACAA,kFACAA,iBACAA,oCACAA,yFACAA,6BACAA,UACAA,QACAA,oBACAA,wGACAA,QACAA,oBACAA,uCACAA,+DACAA,+DACAA,+DACAA,+DACAA,6EACAA,mEACAA,QACAA;AAxfile":"generators/server/Application.Config/app.config.njs.js","sourceRoot":"/Users/vedmalex/work/fte2/demo","sourcesContent":["<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"],"template":{"version":"1.0.0","segments":[{"generatedLine":1,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":2,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":3,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":4,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":5,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":6,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":7,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":8,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":9,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":10,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":11,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":12,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":13,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":14,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":15,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":16,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":17,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":18,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":19,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":20,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":21,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":22,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":23,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":24,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":25,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":26,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":27,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":28,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":29,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":30,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":31,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":32,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":33,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":34,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":35,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":36,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":37,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":38,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":39,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":40,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":41,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":42,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":43,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":44,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":45,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":46,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":47,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":48,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":49,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":50,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":51,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":52,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":53,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":54,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":55,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":56,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":57,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":58,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":59,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":60,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":61,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":62,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":63,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":64,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":65,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":66,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":67,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":68,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":69,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":70,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":71,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":72,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":73,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":74,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":75,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":76,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":77,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":78,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":79,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":80,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":81,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":82,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":83,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":84,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":85,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":86,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":87,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":88,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":89,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":90,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":91,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":92,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":93,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":94,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":95,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":96,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":97,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":98,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":99,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":100,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":101,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":102,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":103,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":104,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":105,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":106,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":107,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":108,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":109,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":110,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":111,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":112,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":113,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":114,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":115,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":116,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":117,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":118,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":119,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":120,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":121,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/app.config.njs.js"},{"generatedLine":8,"generatedColumn":4,"originalLine":1,"originalColumn":17,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":8,"originalLine":2,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":42,"originalLine":3,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":46,"originalLine":4,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":110,"originalLine":5,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":126,"originalLine":6,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":173,"originalLine":7,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":251,"originalLine":8,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":256,"originalLine":9,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":260,"originalLine":10,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":285,"originalLine":11,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":307,"originalLine":12,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":359,"originalLine":13,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":377,"originalLine":14,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":447,"originalLine":15,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":519,"originalLine":16,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":527,"originalLine":17,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":600,"originalLine":18,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":685,"originalLine":19,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":770,"originalLine":20,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":844,"originalLine":21,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":918,"originalLine":22,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":992,"originalLine":23,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":1076,"originalLine":24,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":1107,"originalLine":25,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":1119,"originalLine":26,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":1171,"originalLine":27,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":1207,"originalLine":28,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":1242,"originalLine":29,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":1315,"originalLine":30,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":1368,"originalLine":31,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":1421,"originalLine":32,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":1441,"originalLine":33,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":1522,"originalLine":34,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":1591,"originalLine":35,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":1682,"originalLine":36,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":1700,"originalLine":37,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":1717,"originalLine":38,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":1734,"originalLine":39,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":1817,"originalLine":40,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":1853,"originalLine":41,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":1914,"originalLine":42,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":1931,"originalLine":43,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":1945,"originalLine":44,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":1957,"originalLine":45,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":1974,"originalLine":46,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":2036,"originalLine":47,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":2096,"originalLine":48,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":2108,"originalLine":49,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":2128,"originalLine":50,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":2152,"originalLine":51,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":2231,"originalLine":52,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":2250,"originalLine":53,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":2262,"originalLine":54,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":2272,"originalLine":55,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":2290,"originalLine":56,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":2308,"originalLine":57,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":2392,"originalLine":58,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":2428,"originalLine":59,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":2507,"originalLine":60,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":2524,"originalLine":61,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":2534,"originalLine":62,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":2555,"originalLine":63,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":2573,"originalLine":64,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":2654,"originalLine":65,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":2671,"originalLine":66,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":2699,"originalLine":67,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":2781,"originalLine":68,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":2798,"originalLine":69,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":2808,"originalLine":70,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":2827,"originalLine":71,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":2845,"originalLine":72,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":2924,"originalLine":73,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":2941,"originalLine":74,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":2977,"originalLine":75,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":3057,"originalLine":76,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":3074,"originalLine":77,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":3084,"originalLine":78,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":3102,"originalLine":79,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":3120,"originalLine":80,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":3204,"originalLine":81,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":3226,"originalLine":82,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":3309,"originalLine":83,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":3327,"originalLine":84,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":3401,"originalLine":85,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":3422,"originalLine":86,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":3504,"originalLine":87,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":3521,"originalLine":88,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":3557,"originalLine":89,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":3646,"originalLine":90,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":3675,"originalLine":91,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":3685,"originalLine":92,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":3693,"originalLine":93,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":3713,"originalLine":94,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":3817,"originalLine":95,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":3825,"originalLine":96,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":3845,"originalLine":97,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":3884,"originalLine":98,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":3947,"originalLine":99,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":4010,"originalLine":100,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":4073,"originalLine":101,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":4136,"originalLine":102,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":4213,"originalLine":103,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":4280,"originalLine":104,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"},{"generatedLine":8,"generatedColumn":4288,"originalLine":105,"originalColumn":1,"source":"generators/server/Application.Config/app.config.njs.js","name":"text","content":"<#@ noContent #>\nglobal.STARTTIME = new Date();\n\nconst debug = process.env.DEBUG_APP?.toLowerCase() == 'true'\nif (debug) {\n  const { Config } = require('pipeline.js')\n  Config.timeout = parseInt(process.env.DEBUG_STAGE_TIMEOUT ?? '1000', 10)\n}\n\nglobal.SERVERCONFIG =\nexports.config = {\n  ssl: process.env.SSL?.toLowerCase() == 'true',\n  sslConfig: {\n    key: process.env.SSL_KEY_PATH || USELOCAL('./ssl/server.key'),\n    cert: process.env.SSL_CERT_PATH || USELOCAL('./ssl/server.crt'),\n  },\n  enableGraphQL: process.env.ENABLE_GRAPHQL?.toLowerCase() == 'true',\n  dbConnectionTimeout: parseInt(process.env.DB_CONNECTION_TIMEOUT ?? '1000', 10),\n  sessionTimeout: parseInt(process.env.SESSION_CONNECTION_TIMEOUT ?? '1000', 10),\n  noClientCache: process.env.NO_CLIENT_CACHE?.toLowerCase() == 'true',\n  noHealthCheck: process.env.NO_HEALTH_CHECK?.toLowerCase() == 'true',\n  noServerCache: process.env.NO_SERVER_CACHE?.toLowerCase() == 'true',\n  noTranslationTools: process.env.NO_TRANSLATION_TOOLS?.toLowerCase() == 'true',\n  theme: process.env.THEME,\n  debug,\n  RTL: process.env.RTL?.toLowerCase() == 'true',\n  AppName: process.env.APP_NAME,\n  language: process.env.LOCALE,\n  genFolders: [global.USEGLOBAL(\"app.gen\"), USELOCAL(\"app.gen\")],\n  frameworkFolder: global.USEGLOBAL(\"app.gen\"),\n  directEntryTimeout: process.env.DIRECT_TIMEOUT,\n    telemetry: {\n    enabled: process.env.TELEMETRY_ENABLED?.toLowerCase() === 'true' ?? true,\n    serviceName: process.env.TELEMETRY_SERVICE_NAME ?? 'grainjs',\n    exporter: process.env.TELEMETRY_EXPORTER ?? 'file', // 'file', 'otlp' или 'console'\n    options: {\n      file: {\n        path:\n          process.env.TELEMETRY_FILE_PATH ?? USELOCAL('telemetry/traces.json'),\n        writeInterval: parseInt(\n          process.env.TELEMETRY_WRITE_INTERVAL ?? '1000',\n          10,\n        ),\n      },\n      otlp: {\n        endpoint: process.env.OTEL_EXPORTER_OTLP_ENDPOINT,\n        headers: process.env.OTEL_EXPORTER_OTLP_HEADERS,\n      },\n      console: {\n        prettyPrint:\n          process.env.TELEMETRY_CONSOLE_PRETTY?.toLowerCase() === 'true' ??\n          true,\n      },\n    },\n    mongodb: {\n      enabled:\n        process.env.TELEMETRY_MONGODB_ENABLED?.toLowerCase() === 'true' ?? true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGODB_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    dataloader: {\n      enabled:\n        process.env.TELEMETRY_DATALOADER_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedReporting:\n        process.env.TELEMETRY_DATALOADER_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    mongoose: {\n      enabled:\n        process.env.TELEMETRY_MONGOOSE_ENABLED?.toLowerCase() === 'true' ??\n        true,\n      enhancedDatabaseReporting:\n        process.env.TELEMETRY_MONGOOSE_ENHANCED?.toLowerCase() === 'true' ??\n        true,\n    },\n    graphql: {\n      enabled:\n        process.env.TELEMETRY_GRAPHQL_ENABLED?.toLowerCase() === 'true' ?? true,\n      allowValues:\n        process.env.TELEMETRY_GRAPHQL_ALLOW_VALUES?.toLowerCase() === 'true' ??\n        false,\n      depth: parseInt(process.env.TELEMETRY_GRAPHQL_DEPTH ?? '7', 10),\n      mergeItems:\n        process.env.TELEMETRY_GRAPHQL_MERGE_ITEMS?.toLowerCase() === 'true' ??\n        true,\n      ignoreTrivialResolveSpans:\n        process.env.TELEMETRY_GRAPHQL_IGNORE_TRIVIAL_RESOLVE_SPANS?.toLowerCase() ===\n          'true' ?? true,\n    },\n  },\n  impersonate: {\n    maxAge: parseInt(process.env.IMPERSONATE_MAX_AGE ?? '86400', 10), // default 24 hours in seconds\n  },\n  connections: {\n    system: process.env.SYSTEM_URL,\n    local: process.env.LOCAL_URL ?? process.env.SYSTEM_URL,\n    files: process.env.FILES_URL ?? process.env.SYSTEM_URL,\n    users: process.env.USERS_URL ?? process.env.SYSTEM_URL,\n    audit: process.env.AUDIT_URL ?? process.env.SYSTEM_URL,\n    transactions: process.env.TRANSACTIONS_URL ?? process.env.SYSTEM_URL,\n    session: process.env.SESSION_URL ?? process.env.SYSTEM_URL,\n  },\n};"}]}}