{"version":3,"sources":["generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"],"names":["code","text","expression"],"mappings":"AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IACCA;AADD,IACCA,AACAA;AAFD,IAECA,AACAA;AAHD,IAGCA,AACAA;AAJD,IAICA,AACAA;AALD,IAKCA,AACAA;AAND,IAMCA,AACAA;AAPD,IAOCA,AACAA;AARD,IAQCA,AAAEC,IACFA,IACAA,+BAA6BC,oBAAqBD,cAAYC,eAAgBD,QAC9EA,kBAAgBC,yBAA0BD,MAC1CA,+CACAA,mBAAiBC,qBAAsBD,gBACvCA,aAAWC,qBAAsBD,MACjCA,iCAA+BC,oBAAqBD,GAACC,eAAgBD,KAAGD;AAfzE,IAeyEA,AAAwBC,OAAIC,iBAAkBD,IAACD;AAfxH,IAewHA,AAAKC,MAC5HA,IAAED;AAhBH,IAgBGA,AAA+BC,IACjCA,qBACAA,YAAUC,4BAA6BD,MACvCA,UAAQC,0BAA2BD,MACnCA,oBAAkBC,oCAAqCD,MACvDA,kBAAgBC,kCAAmCD,MACnDA,QACAA,IAAED;AAvBH,IAuBGA,AAAMC,IACRA,mBACAA,qBAAmBC,wBAAyBD,KAC5CA,iBAAeC,4EAA6ED,KAC5FA,aAAWC,kDAAmDD,KAC9DA,gCACAA,sBACAA,wBACAA,QAAMD;AA/BP,IA+BOA,AAAiHC,IACvHA,iBACAA,qCACAA,8BACAA,8BACAA,6DACAA,4CACAA,YACAA,QAAMD;AAvCP,IAuCOA,AAAOC,IACbA,oDAAiDC,eAAgBD,MAAGC,oBAAqBD,GAACC,eAAgBD,wBAC1GA,qFACAA,2BACAA,4BACAA,mDAAiDD;AA5ClD,IA4CkDA,AACjDA;AA7CD,IA6CCA,AACAA;AA9CD,IA8CCA,AACAA;AA/CD,IA+CCA,AACAA;AAhDD,IAgDCA,AAA4BC,IAC5BA,yCAAuCC,oBAAqBD,GAACC,eAAgBD,aAAWC,uBAAwBD,IAAEC,cAAeD,SACjIA,YAAUD;AAlDX,IAkDWA,AACVA;AAnDD,IAmDCA,AACAA;AApDD,IAoDCA,AACAA;AArDD,IAqDCA,AAAUC,IACVA,YACAA,IACAA,sBACAA,wDACAA,0FAAwFC,oBAAqBD,GAACC,eAAgBD,yDAC9HA,uDACAA,uDACAA,wDACAA,+DACAA,+DACAA,gEACAA,cACAA,2EACAA,2FAAyFC,oBAAqBD,GAACC,eAAgBD,kEAC/HA,cACAA,wEACAA,oFAAkFC,oBAAqBD,GAACC,eAAgBD,kEACxHA,aACAA,YACAA,WACAA,mCACAA,OACAA;AA5ED;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","file":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","sourceRoot":"/Users/vedmalex/work/fte2/demo","sourcesContent":["<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"],"template":{"version":"1.0.0","segments":[{"generatedLine":1,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":2,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":3,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":4,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":5,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":6,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":7,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":8,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":9,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":10,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":11,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":12,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":13,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":14,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":15,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":16,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":17,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":18,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":19,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":20,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":21,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":22,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":23,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":24,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":25,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":26,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":27,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":28,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":29,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":30,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":31,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":32,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":33,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":34,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":35,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":36,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":37,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":38,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":39,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":40,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":41,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":42,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":43,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":44,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":45,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":46,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":47,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":48,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":49,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":50,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":51,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":52,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":53,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":54,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":55,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":56,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":57,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":58,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":59,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":60,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":61,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":62,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":63,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":64,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":65,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":66,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":67,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":68,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":69,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":70,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":71,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":72,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":73,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":74,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":75,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":76,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":77,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":78,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":79,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":80,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":81,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":82,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":83,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":84,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":85,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":86,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":87,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":88,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":89,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":90,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":91,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":92,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":93,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":94,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":95,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":96,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":97,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":98,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":99,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":100,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":101,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":102,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":103,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":104,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":105,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":106,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":107,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":108,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":109,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js"},{"generatedLine":8,"generatedColumn":4,"originalLine":2,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":9,"generatedColumn":4,"originalLine":2,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":9,"generatedColumn":4,"originalLine":3,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":10,"generatedColumn":4,"originalLine":3,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":10,"generatedColumn":4,"originalLine":4,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":11,"generatedColumn":4,"originalLine":4,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":11,"generatedColumn":4,"originalLine":5,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":12,"generatedColumn":4,"originalLine":5,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":12,"generatedColumn":4,"originalLine":6,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":4,"originalLine":6,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":4,"originalLine":7,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":14,"generatedColumn":4,"originalLine":7,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":14,"generatedColumn":4,"originalLine":8,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":15,"generatedColumn":4,"originalLine":8,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":15,"generatedColumn":4,"originalLine":9,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":4,"originalLine":9,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":4,"originalLine":9,"originalColumn":3,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":8,"originalLine":10,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":12,"originalLine":11,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":43,"originalLine":11,"originalColumn":30,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":63,"originalLine":11,"originalColumn":51,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":77,"originalLine":11,"originalColumn":63,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":92,"originalLine":11,"originalColumn":79,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":100,"originalLine":12,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":118,"originalLine":12,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":143,"originalLine":12,"originalColumn":43,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":149,"originalLine":13,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":196,"originalLine":14,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":215,"originalLine":14,"originalColumn":18,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":236,"originalLine":14,"originalColumn":40,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":252,"originalLine":15,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":265,"originalLine":15,"originalColumn":12,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":286,"originalLine":15,"originalColumn":34,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":292,"originalLine":16,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":325,"originalLine":16,"originalColumn":32,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":345,"originalLine":16,"originalColumn":53,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":348,"originalLine":16,"originalColumn":54,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":363,"originalLine":16,"originalColumn":70,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":368,"originalLine":16,"originalColumn":73,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":17,"generatedColumn":4,"originalLine":16,"originalColumn":73,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":17,"generatedColumn":4,"originalLine":16,"originalColumn":97,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":17,"generatedColumn":11,"originalLine":16,"originalColumn":101,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":17,"generatedColumn":28,"originalLine":16,"originalColumn":119,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":17,"generatedColumn":32,"originalLine":16,"originalColumn":120,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":18,"generatedColumn":4,"originalLine":16,"originalColumn":120,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":18,"generatedColumn":4,"originalLine":16,"originalColumn":125,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":18,"generatedColumn":10,"originalLine":17,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":18,"generatedColumn":14,"originalLine":17,"originalColumn":3,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":19,"generatedColumn":4,"originalLine":17,"originalColumn":3,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":19,"generatedColumn":4,"originalLine":17,"originalColumn":34,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":19,"generatedColumn":8,"originalLine":18,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":19,"generatedColumn":29,"originalLine":19,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":19,"generatedColumn":41,"originalLine":19,"originalColumn":11,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":19,"generatedColumn":69,"originalLine":19,"originalColumn":40,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":19,"generatedColumn":75,"originalLine":20,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":19,"generatedColumn":85,"originalLine":20,"originalColumn":9,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":19,"generatedColumn":111,"originalLine":20,"originalColumn":36,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":19,"generatedColumn":117,"originalLine":21,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":19,"generatedColumn":137,"originalLine":21,"originalColumn":19,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":19,"generatedColumn":173,"originalLine":21,"originalColumn":56,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":19,"generatedColumn":179,"originalLine":22,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":19,"generatedColumn":197,"originalLine":22,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":19,"generatedColumn":231,"originalLine":22,"originalColumn":52,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":19,"generatedColumn":237,"originalLine":23,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":19,"generatedColumn":245,"originalLine":24,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":19,"generatedColumn":249,"originalLine":24,"originalColumn":3,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":20,"generatedColumn":4,"originalLine":24,"originalColumn":3,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":20,"generatedColumn":4,"originalLine":24,"originalColumn":9,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":20,"generatedColumn":8,"originalLine":25,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":20,"generatedColumn":27,"originalLine":26,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":20,"generatedColumn":48,"originalLine":26,"originalColumn":20,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":20,"generatedColumn":72,"originalLine":26,"originalColumn":45,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":20,"generatedColumn":77,"originalLine":27,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":20,"generatedColumn":94,"originalLine":27,"originalColumn":16,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":20,"generatedColumn":170,"originalLine":27,"originalColumn":93,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":20,"generatedColumn":175,"originalLine":28,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":20,"generatedColumn":188,"originalLine":28,"originalColumn":12,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":20,"generatedColumn":238,"originalLine":28,"originalColumn":63,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":20,"generatedColumn":243,"originalLine":29,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":20,"generatedColumn":275,"originalLine":30,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":20,"generatedColumn":297,"originalLine":31,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":20,"generatedColumn":321,"originalLine":32,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":20,"generatedColumn":329,"originalLine":32,"originalColumn":7,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":21,"generatedColumn":4,"originalLine":32,"originalColumn":7,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":21,"generatedColumn":4,"originalLine":32,"originalColumn":120,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":21,"generatedColumn":8,"originalLine":33,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":21,"generatedColumn":25,"originalLine":34,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":21,"generatedColumn":62,"originalLine":35,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":21,"generatedColumn":92,"originalLine":36,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":21,"generatedColumn":122,"originalLine":37,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":21,"generatedColumn":183,"originalLine":38,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":21,"generatedColumn":227,"originalLine":39,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":21,"generatedColumn":239,"originalLine":40,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":21,"generatedColumn":247,"originalLine":40,"originalColumn":7,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":22,"generatedColumn":4,"originalLine":40,"originalColumn":7,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":22,"generatedColumn":4,"originalLine":40,"originalColumn":14,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":22,"generatedColumn":8,"originalLine":41,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":22,"generatedColumn":60,"originalLine":41,"originalColumn":50,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":22,"generatedColumn":75,"originalLine":41,"originalColumn":66,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":22,"generatedColumn":81,"originalLine":41,"originalColumn":69,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":22,"generatedColumn":101,"originalLine":41,"originalColumn":90,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":22,"generatedColumn":104,"originalLine":41,"originalColumn":91,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":22,"generatedColumn":119,"originalLine":41,"originalColumn":107,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":22,"generatedColumn":143,"originalLine":42,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":22,"generatedColumn":228,"originalLine":43,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":22,"generatedColumn":255,"originalLine":44,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":22,"generatedColumn":283,"originalLine":45,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":22,"generatedColumn":334,"originalLine":45,"originalColumn":50,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":23,"generatedColumn":4,"originalLine":45,"originalColumn":50,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":23,"generatedColumn":4,"originalLine":46,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":24,"generatedColumn":4,"originalLine":46,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":24,"generatedColumn":4,"originalLine":47,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":25,"generatedColumn":4,"originalLine":47,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":25,"generatedColumn":4,"originalLine":48,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":26,"generatedColumn":4,"originalLine":48,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":26,"generatedColumn":4,"originalLine":49,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":27,"generatedColumn":4,"originalLine":49,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":27,"generatedColumn":4,"originalLine":49,"originalColumn":29,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":27,"generatedColumn":8,"originalLine":50,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":27,"generatedColumn":49,"originalLine":50,"originalColumn":40,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":27,"generatedColumn":69,"originalLine":50,"originalColumn":61,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":27,"generatedColumn":72,"originalLine":50,"originalColumn":62,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":27,"generatedColumn":87,"originalLine":50,"originalColumn":78,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":27,"generatedColumn":100,"originalLine":50,"originalColumn":89,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":27,"generatedColumn":123,"originalLine":50,"originalColumn":113,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":27,"generatedColumn":127,"originalLine":50,"originalColumn":115,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":27,"generatedColumn":141,"originalLine":50,"originalColumn":130,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":27,"generatedColumn":150,"originalLine":51,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":27,"generatedColumn":162,"originalLine":51,"originalColumn":11,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":28,"generatedColumn":4,"originalLine":51,"originalColumn":11,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":28,"generatedColumn":4,"originalLine":52,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":29,"generatedColumn":4,"originalLine":52,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":29,"generatedColumn":4,"originalLine":53,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":30,"generatedColumn":4,"originalLine":53,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":30,"generatedColumn":4,"originalLine":54,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":31,"generatedColumn":4,"originalLine":54,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":31,"generatedColumn":4,"originalLine":54,"originalColumn":11,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":31,"generatedColumn":8,"originalLine":55,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":31,"generatedColumn":20,"originalLine":56,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":31,"generatedColumn":24,"originalLine":57,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":31,"generatedColumn":46,"originalLine":58,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":31,"generatedColumn":102,"originalLine":59,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":31,"generatedColumn":192,"originalLine":59,"originalColumn":89,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":31,"generatedColumn":212,"originalLine":59,"originalColumn":110,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":31,"generatedColumn":215,"originalLine":59,"originalColumn":111,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":31,"generatedColumn":230,"originalLine":59,"originalColumn":127,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":31,"generatedColumn":287,"originalLine":60,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":31,"generatedColumn":342,"originalLine":61,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":31,"generatedColumn":397,"originalLine":62,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":31,"generatedColumn":453,"originalLine":63,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":31,"generatedColumn":516,"originalLine":64,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":31,"generatedColumn":579,"originalLine":65,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":31,"generatedColumn":643,"originalLine":66,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":31,"generatedColumn":657,"originalLine":67,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":31,"generatedColumn":732,"originalLine":68,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":31,"generatedColumn":823,"originalLine":68,"originalColumn":90,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":31,"generatedColumn":843,"originalLine":68,"originalColumn":111,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":31,"generatedColumn":846,"originalLine":68,"originalColumn":112,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":31,"generatedColumn":861,"originalLine":68,"originalColumn":128,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":31,"generatedColumn":927,"originalLine":69,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":31,"generatedColumn":941,"originalLine":70,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":31,"generatedColumn":1013,"originalLine":71,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":31,"generatedColumn":1097,"originalLine":71,"originalColumn":83,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":31,"generatedColumn":1117,"originalLine":71,"originalColumn":104,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":31,"generatedColumn":1120,"originalLine":71,"originalColumn":105,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":31,"generatedColumn":1135,"originalLine":71,"originalColumn":121,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":31,"generatedColumn":1201,"originalLine":72,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":31,"generatedColumn":1214,"originalLine":73,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":31,"generatedColumn":1226,"originalLine":74,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":31,"generatedColumn":1237,"originalLine":75,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":31,"generatedColumn":1272,"originalLine":76,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":31,"generatedColumn":1279,"originalLine":77,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListSearch.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListSearch.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listsearch',\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  // tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n      <#- if(!(context.queryResult || context.legacySearch) && config.pageSizeSearch !== -1 && !context.staticStore){#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n      <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Search Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Search Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"}]}}