{"version":3,"sources":["generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"],"names":["text","expression","code"],"mappings":"AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAiBA,IAChBA,IACAA,+BAA6BC,oBAAqBD,gBAAcC,eAAgBD,QAChFA,kBAAgBC,yBAA0BD,MAC1CA,kBAAgBC,kBAAmBD,MACnCA,iDACAA,mBAAiBC,qBAAsBD,kBACvCA,cAAWC,qBAAsBD,OACjCA,eAAaC,4EAA6ED,KAC1FA,gCAA8BC,oBAAqBD,GAACC,eAAgBD,IAAEE;AATvE,IASuEA,AAAwBF,OAAIC,iBAAkBD,IAACE;AATtH,IASsHA,AAAKF,MAC1HA,IAAEE;AAVH,IAUGA,AAAsDF,IACxDA,yBACAA,IAAEE;AAZH,IAYGA,AAAKF,IACPA,gCACAA,0BACAA,6DAA2DC,oBAAqBD,GAACC,eAAgBD,KAAGC,oBAAqBD,GAACC,eAAgBD,iCAC1IA,yBACAA,4BACAA,kBACAA,aACAA,6BACAA,4BACAA,+BACAA,+BACAA,wBACAA,8BACAA,gBACAA,qBACAA,iBACAA,yBAAsBC,qBAAsBD,aAC5CA,gBAAcE;AA9Bf,IA8BeA,AAAsDF,IACpEA,qCACAA,gBAAcE;AAhCf,IAgCeA,AAAKF,IACnBA,iBACAA,eACAA,cACAA,aACAA,4BACAA,iBACAA,kDACAA,iBACAA,gBACAA,qBAAkBC,qBAAsBD,iBACxCA,wBACAA,+BACAA,iDAA+CC,oBAAqBD,UAAQC,eAAgBD,MAC5FA,aACAA,YACAA,IACAA,oBACAA,aACAA,oDACAA,sCACAA,0BAAuBC,qBAAsBD,iBAC7CA,0CACAA,0BACAA,sCACAA,4FAA0FC,oBAAqBD,GAACC,eAAgBD,wCAChIA,iBACAA,eACAA,cACAA,aACAA,mDACAA,sCACAA,0CACAA,0BACAA,sCACAA,qFAAmFC,oBAAqBD,GAACC,eAAgBD,wCACzHA,iBACAA,eACAA,cACAA,aACAA,mDACAA,qCACAA,4BACAA,2BACAA,yCACAA,0BACAA,sCACAA,oFAAkFC,oBAAqBD,GAACC,eAAgBD,wCACxHA,iBACAA,eACAA,cACAA,aACAA,oDACAA,oCACAA,0BACAA,sCACAA,qFAAmFC,oBAAqBD,GAACC,eAAgBD,wCACzHA,iBACAA,eACAA,aACAA,WACAA,WACAA,mCACAA,OACAA;AAhfile":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","sourceRoot":"/Users/vedmalex/work/fte2/demo","sourcesContent":["<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"],"template":{"version":"1.0.0","segments":[{"generatedLine":1,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":2,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":3,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":4,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":5,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":6,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":7,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":8,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":9,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":10,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":11,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":12,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":13,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":14,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":15,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":16,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":17,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":18,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":19,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":20,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":21,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":22,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":23,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":24,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":25,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":26,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":27,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":28,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":29,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":30,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":31,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":32,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":33,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":34,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":35,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":36,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":37,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":38,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":39,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":40,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":41,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":42,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":43,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":44,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":45,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":46,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":47,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":48,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":49,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":50,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":51,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":52,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":53,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":54,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":55,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":56,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":57,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":58,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":59,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":60,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":61,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":62,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":63,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":64,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":65,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":66,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":67,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":68,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":69,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":70,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":71,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":72,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":73,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":74,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":75,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":76,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":77,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":78,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":79,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":80,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":81,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":82,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":83,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":84,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":85,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":86,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":87,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":88,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":89,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":90,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":91,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":92,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":93,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":94,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":95,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":96,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":97,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":98,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":99,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":100,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":101,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":102,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":103,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":104,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":105,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":106,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":107,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":108,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":109,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":110,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":111,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":112,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":113,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":114,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":115,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":116,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":117,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":118,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":119,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":120,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":121,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":122,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":123,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":124,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":125,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js"},{"generatedLine":8,"generatedColumn":4,"originalLine":1,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":8,"generatedColumn":8,"originalLine":2,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":8,"generatedColumn":12,"originalLine":3,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":8,"generatedColumn":43,"originalLine":3,"originalColumn":30,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"expression","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":8,"generatedColumn":63,"originalLine":3,"originalColumn":51,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":8,"generatedColumn":79,"originalLine":3,"originalColumn":65,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"expression","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":8,"generatedColumn":94,"originalLine":3,"originalColumn":81,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":8,"generatedColumn":102,"originalLine":4,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":8,"generatedColumn":120,"originalLine":4,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"expression","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":8,"generatedColumn":145,"originalLine":4,"originalColumn":43,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":8,"generatedColumn":151,"originalLine":5,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":8,"generatedColumn":169,"originalLine":5,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"expression","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":8,"generatedColumn":187,"originalLine":5,"originalColumn":36,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":8,"generatedColumn":193,"originalLine":6,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":8,"generatedColumn":242,"originalLine":7,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":8,"generatedColumn":261,"originalLine":7,"originalColumn":18,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"expression","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":8,"generatedColumn":282,"originalLine":7,"originalColumn":40,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":8,"generatedColumn":300,"originalLine":8,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":8,"generatedColumn":314,"originalLine":8,"originalColumn":12,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"expression","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":8,"generatedColumn":335,"originalLine":8,"originalColumn":34,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":8,"generatedColumn":342,"originalLine":9,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":8,"generatedColumn":357,"originalLine":9,"originalColumn":14,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"expression","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":8,"generatedColumn":433,"originalLine":9,"originalColumn":91,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":8,"generatedColumn":438,"originalLine":10,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":8,"generatedColumn":470,"originalLine":10,"originalColumn":31,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"expression","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":8,"generatedColumn":490,"originalLine":10,"originalColumn":52,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":8,"generatedColumn":493,"originalLine":10,"originalColumn":53,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"expression","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":8,"generatedColumn":508,"originalLine":10,"originalColumn":69,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":8,"generatedColumn":512,"originalLine":10,"originalColumn":71,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"code","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":9,"generatedColumn":4,"originalLine":10,"originalColumn":71,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"code","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":9,"generatedColumn":4,"originalLine":10,"originalColumn":95,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":9,"generatedColumn":11,"originalLine":10,"originalColumn":99,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"expression","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":9,"generatedColumn":28,"originalLine":10,"originalColumn":117,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":9,"generatedColumn":32,"originalLine":10,"originalColumn":118,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"code","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":10,"generatedColumn":4,"originalLine":10,"originalColumn":118,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"code","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":10,"generatedColumn":4,"originalLine":10,"originalColumn":123,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":10,"generatedColumn":10,"originalLine":11,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":10,"generatedColumn":14,"originalLine":11,"originalColumn":3,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"code","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":11,"generatedColumn":4,"originalLine":11,"originalColumn":3,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"code","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":11,"generatedColumn":4,"originalLine":11,"originalColumn":57,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":11,"generatedColumn":8,"originalLine":12,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":11,"generatedColumn":33,"originalLine":13,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":11,"generatedColumn":37,"originalLine":13,"originalColumn":3,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"code","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":12,"generatedColumn":4,"originalLine":13,"originalColumn":3,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"code","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":12,"generatedColumn":4,"originalLine":13,"originalColumn":8,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":12,"generatedColumn":8,"originalLine":14,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":12,"generatedColumn":40,"originalLine":15,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":12,"generatedColumn":66,"originalLine":16,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":12,"generatedColumn":127,"originalLine":16,"originalColumn":60,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"expression","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":12,"generatedColumn":147,"originalLine":16,"originalColumn":81,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":12,"generatedColumn":150,"originalLine":16,"originalColumn":82,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"expression","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":12,"generatedColumn":165,"originalLine":16,"originalColumn":98,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":12,"generatedColumn":170,"originalLine":16,"originalColumn":101,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"expression","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":12,"generatedColumn":190,"originalLine":16,"originalColumn":122,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":12,"generatedColumn":193,"originalLine":16,"originalColumn":123,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"expression","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":12,"generatedColumn":208,"originalLine":16,"originalColumn":139,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":12,"generatedColumn":241,"originalLine":17,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":12,"generatedColumn":266,"originalLine":18,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":12,"generatedColumn":294,"originalLine":19,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":12,"generatedColumn":312,"originalLine":20,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":12,"generatedColumn":325,"originalLine":21,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":12,"generatedColumn":354,"originalLine":22,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":12,"generatedColumn":382,"originalLine":23,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":12,"generatedColumn":413,"originalLine":24,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":12,"generatedColumn":444,"originalLine":25,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":12,"generatedColumn":468,"originalLine":26,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":12,"generatedColumn":498,"originalLine":27,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":12,"generatedColumn":514,"originalLine":28,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":12,"generatedColumn":535,"originalLine":29,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":12,"generatedColumn":552,"originalLine":30,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":12,"generatedColumn":577,"originalLine":30,"originalColumn":23,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"expression","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":12,"generatedColumn":598,"originalLine":30,"originalColumn":45,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":12,"generatedColumn":611,"originalLine":31,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":12,"generatedColumn":627,"originalLine":31,"originalColumn":15,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"code","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":4,"originalLine":31,"originalColumn":15,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"code","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":4,"originalLine":31,"originalColumn":69,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":8,"originalLine":32,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":45,"originalLine":33,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":61,"originalLine":33,"originalColumn":15,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"code","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":4,"originalLine":33,"originalColumn":15,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"code","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":4,"originalLine":33,"originalColumn":20,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":8,"originalLine":34,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":25,"originalLine":35,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":40,"originalLine":36,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":54,"originalLine":37,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":67,"originalLine":38,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":95,"originalLine":39,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":112,"originalLine":40,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":162,"originalLine":41,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":179,"originalLine":42,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":195,"originalLine":43,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":216,"originalLine":43,"originalColumn":19,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"expression","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":237,"originalLine":43,"originalColumn":41,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":254,"originalLine":44,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":278,"originalLine":45,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":309,"originalLine":46,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":358,"originalLine":46,"originalColumn":48,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"expression","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":378,"originalLine":46,"originalColumn":69,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":388,"originalLine":46,"originalColumn":77,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"expression","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":403,"originalLine":46,"originalColumn":93,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":409,"originalLine":47,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":422,"originalLine":48,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":434,"originalLine":49,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":438,"originalLine":50,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":458,"originalLine":51,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":471,"originalLine":52,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":523,"originalLine":53,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":561,"originalLine":54,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":587,"originalLine":54,"originalColumn":24,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"expression","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":608,"originalLine":54,"originalColumn":46,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":625,"originalLine":55,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":667,"originalLine":56,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":693,"originalLine":57,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":731,"originalLine":58,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":823,"originalLine":58,"originalColumn":91,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"expression","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":843,"originalLine":58,"originalColumn":112,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":846,"originalLine":58,"originalColumn":113,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"expression","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":861,"originalLine":58,"originalColumn":129,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":901,"originalLine":59,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":918,"originalLine":60,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":933,"originalLine":61,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":947,"originalLine":62,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":960,"originalLine":63,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":1011,"originalLine":64,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":1049,"originalLine":65,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":1091,"originalLine":66,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":1117,"originalLine":67,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":1155,"originalLine":68,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":1240,"originalLine":68,"originalColumn":84,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"expression","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":1260,"originalLine":68,"originalColumn":105,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":1263,"originalLine":68,"originalColumn":106,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"expression","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":1278,"originalLine":68,"originalColumn":122,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":1318,"originalLine":69,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":1335,"originalLine":70,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":1350,"originalLine":71,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":1364,"originalLine":72,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":1377,"originalLine":73,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":1428,"originalLine":74,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":1465,"originalLine":75,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":1493,"originalLine":76,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":1520,"originalLine":77,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":1561,"originalLine":78,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":1587,"originalLine":79,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":1625,"originalLine":80,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":1709,"originalLine":80,"originalColumn":83,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"expression","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":1729,"originalLine":80,"originalColumn":104,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":1732,"originalLine":80,"originalColumn":105,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"expression","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":1747,"originalLine":80,"originalColumn":121,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":1787,"originalLine":81,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":1804,"originalLine":82,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":1819,"originalLine":83,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":1833,"originalLine":84,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":1846,"originalLine":85,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":1898,"originalLine":86,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":1934,"originalLine":87,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":1960,"originalLine":88,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":1998,"originalLine":89,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":2083,"originalLine":89,"originalColumn":84,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"expression","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":2103,"originalLine":89,"originalColumn":105,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":2106,"originalLine":89,"originalColumn":106,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"expression","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":2121,"originalLine":89,"originalColumn":122,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":2161,"originalLine":90,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":2178,"originalLine":91,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":2193,"originalLine":92,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":2206,"originalLine":93,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":2217,"originalLine":94,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":2228,"originalLine":95,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":2263,"originalLine":96,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":14,"generatedColumn":2270,"originalLine":97,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.SearchWindow.njs.js","name":"text","content":"<#@ noContent #>\n\nExt.define('Modeleditor.view.#{context.$namespace}.SearchWindow.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseWindow',\n  alias: 'widget.#{context.$widgetName}searchwindow',\n  widget: \"#{context.$widgetName}\",\n  queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#- if(context.queryResult || context.legacySearch){#>\n  customSearch: true,\n  <#}#>\n  initComponent: function(){\n    Ext.apply( this, {\n      title: _t('Search', 'SYSTEM', 'titles') + ': ' + _t('#{context.$namespace}.#{context.$name}','#{context.$namespace}.#{context.$name}', 'titles', 'SearchWindow'),\n      layout: 'card',\n      // closable: true,\n      items: [\n        {\n          xtype: 'panel',\n          border: false,\n          layout: 'anchor',\n          autoScroll: true,\n          defaults:{\n            anchor: '100%'\n          },\n          items:[\n            {\n              xtype: \"#{context.$widgetName}search\",\n              <#- if(context.queryResult || context.legacySearch){#>\n              customSearch: true,\n              <#}#>\n            }\n          ]\n        },\n        {\n          dockedItems: [\n            {\n              xtype: \"basesearchgridtoolbar\"\n            }\n          ],\n          xtype: \"#{context.$widgetName}listsearch\",\n          border: 0,\n          paginator: false,\n          store: Ext.create('Modeleditor.store.#{context.$namespace}.Search.#{context.$name}')\n        }\n      ],\n\n      buttons: [\n        {\n          text: _t('Search','SYSTEM','buttons'),\n          action: \"startSearch\",\n          resultGrid: \"#{context.$widgetName}listsearch\",\n          itemId: 'startSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Start Search', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Reset','SYSTEM','buttons'),\n          action: \"resetSearch\",\n          itemId: 'resetSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Reset', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Back','SYSTEM', 'buttons'),\n          action: \"backSearch\",\n          disable: true,\n          hidden: true,\n          itemId: 'backSearchButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Back', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Close','SYSTEM', 'buttons'),\n          itemId: 'closeButton',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Search Window Close', { serverModel: '#{context.$namespace}.#{context.$name}', windowId: btn.up('window').id });\n            }\n          }\n        }\n      ]\n    });\n    this.callParent(arguments);\n  }\n});"}]}}