{"version":3,"sources":["generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"],"names":["text","code","expression"],"mappings":"AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAiBA,IAChBC;AADD,IACCA,AACAA;AAFD,IAECA,AACAA;AAHD,IAGCA,AAAED,IACFA,gCAA6BE,mBAAoBF,kBAAgBE,eAAgBF,SACjFA,kBAAgBE,yBAA0BF,MAC1CA,kBAAgBE,kBAAmBF,MACnCA,iBACAA,gEACAA,gCAA8BE,oBAAqBF,GAACE,eAAgBF,IAAEC;AATvE,IASuEA,AAAwBD,OAAIE,iBAAkBF,IAACC;AATtH,IASsHA,AAAKD,MAC1HA,oBAAiBE,qBAAsBF,qBACvCA,gCACAA,uBACAA,sFAAoFE,oBAAqBF,GAACE,eAAgBF,gCAC1HA,+BACAA,gBAAcE,qBAAsBF,aACpCA,SACAA,kDACAA,8DACAA,SACAA,gDACAA,0DACAA,SACAA,8CACAA,sDACAA,SACAA,6CACAA,oDACAA,SACAA,wBACAA,qCACAA,+BACAA,oBAAiBE,eAAgBF,MAAGE,oBAAqBF,GAACE,eAAgBF,kCAC1EA,uBACAA,mBACAA,0BACAA,8BACAA,YACAA,oBACAA,oBACAA,uBACAA,YACAA,kBACAA,aACAA,+BACAA,yBACAA,2BACAA,8BACAA,0BACAA,4CACAA,iDACAA,uCACAA,uCACAA,kBACAA,eACAA,cACAA,sBAAoBE,qBAAsBF,gBAC1CA,mCACAA,eACAA,YACAA,qBACAA,aACAA,iDACAA,+BACAA,0BACAA,sCACAA,2FAAyFE,oBAAqBF,GAACE,eAAgBF,4CAC/HA,iBACAA,eACAA,cACAA,aACAA,qDACAA,mCACAA,0BACAA,sCACAA,+FAA6FE,oBAAqBF,GAACE,eAAgBF,4CACnIA,iBACAA,eACAA,aACAA,YACAA,sBACAA,oCACAA,kFAAgFE,oBAAqBF,GAACE,eAAgBF,gCACtHA,cACAA,2CACAA,0FAAwFE,oBAAqBF,GAACE,eAAgBF,gCAC9HA,aACAA,WACAA,WACAA,mfile":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","sourceRoot":"/Users/vedmalex/work/fte2/demo","sourcesContent":["<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"],"template":{"version":"1.0.0","segments":[{"generatedLine":1,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":2,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":3,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":4,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":5,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":6,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":7,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":8,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":9,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":10,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":11,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":12,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":13,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":14,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":15,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":16,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":17,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":18,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":19,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":20,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":21,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":22,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":23,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":24,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":25,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":26,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":27,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":28,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":29,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":30,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":31,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":32,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":33,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":34,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":35,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":36,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":37,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":38,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":39,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":40,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":41,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":42,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":43,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":44,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":45,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":46,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":47,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":48,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":49,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":50,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":51,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":52,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":53,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":54,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":55,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":56,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":57,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":58,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":59,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":60,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":61,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":62,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":63,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":64,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":65,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":66,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":67,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":68,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":69,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":70,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":71,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":72,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":73,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":74,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":75,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":76,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":77,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":78,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":79,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":80,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":81,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":82,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":83,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":84,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":85,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":86,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":87,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":88,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":89,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":90,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":91,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":92,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":93,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":94,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":95,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":96,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":97,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":98,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":99,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":100,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":101,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":102,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":103,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":104,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":105,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":106,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":107,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":108,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":109,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":110,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":111,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":112,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":113,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js"},{"generatedLine":8,"generatedColumn":4,"originalLine":1,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":8,"generatedColumn":8,"originalLine":2,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"code","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":9,"generatedColumn":4,"originalLine":2,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"code","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":9,"generatedColumn":4,"originalLine":3,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"code","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":10,"generatedColumn":4,"originalLine":3,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"code","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":10,"generatedColumn":4,"originalLine":4,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"code","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":11,"generatedColumn":4,"originalLine":4,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"code","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":11,"generatedColumn":4,"originalLine":4,"originalColumn":3,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":11,"generatedColumn":8,"originalLine":5,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":11,"generatedColumn":40,"originalLine":5,"originalColumn":30,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"expression","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":11,"generatedColumn":59,"originalLine":5,"originalColumn":50,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":11,"generatedColumn":77,"originalLine":5,"originalColumn":66,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"expression","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":11,"generatedColumn":92,"originalLine":5,"originalColumn":82,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":11,"generatedColumn":101,"originalLine":6,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":11,"generatedColumn":119,"originalLine":6,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"expression","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":11,"generatedColumn":144,"originalLine":6,"originalColumn":43,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":11,"generatedColumn":150,"originalLine":7,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":11,"generatedColumn":168,"originalLine":7,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"expression","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":11,"generatedColumn":186,"originalLine":7,"originalColumn":36,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":11,"generatedColumn":192,"originalLine":8,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":11,"generatedColumn":209,"originalLine":9,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":11,"generatedColumn":273,"originalLine":10,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":11,"generatedColumn":305,"originalLine":10,"originalColumn":31,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"expression","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":11,"generatedColumn":325,"originalLine":10,"originalColumn":52,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":11,"generatedColumn":328,"originalLine":10,"originalColumn":53,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"expression","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":11,"generatedColumn":343,"originalLine":10,"originalColumn":69,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":11,"generatedColumn":347,"originalLine":10,"originalColumn":71,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"code","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":12,"generatedColumn":4,"originalLine":10,"originalColumn":71,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"code","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":12,"generatedColumn":4,"originalLine":10,"originalColumn":95,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":12,"generatedColumn":11,"originalLine":10,"originalColumn":99,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"expression","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":12,"generatedColumn":28,"originalLine":10,"originalColumn":117,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":12,"generatedColumn":32,"originalLine":10,"originalColumn":118,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"code","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":4,"originalLine":10,"originalColumn":118,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"code","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":4,"originalLine":10,"originalColumn":123,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":10,"originalLine":11,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":30,"originalLine":11,"originalColumn":18,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"expression","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":51,"originalLine":11,"originalColumn":40,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":72,"originalLine":12,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":104,"originalLine":13,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":127,"originalLine":14,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":213,"originalLine":14,"originalColumn":85,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"expression","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":233,"originalLine":14,"originalColumn":106,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":236,"originalLine":14,"originalColumn":107,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"expression","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":251,"originalLine":14,"originalColumn":123,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":283,"originalLine":15,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":314,"originalLine":16,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":330,"originalLine":16,"originalColumn":15,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"expression","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":351,"originalLine":16,"originalColumn":37,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":364,"originalLine":17,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":373,"originalLine":18,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":423,"originalLine":19,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":485,"originalLine":20,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":494,"originalLine":21,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":542,"originalLine":22,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":600,"originalLine":23,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":609,"originalLine":24,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":655,"originalLine":25,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":709,"originalLine":26,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":718,"originalLine":27,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":763,"originalLine":28,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":815,"originalLine":29,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":824,"originalLine":30,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":848,"originalLine":31,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":885,"originalLine":32,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":916,"originalLine":33,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":936,"originalLine":33,"originalColumn":18,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"expression","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":951,"originalLine":33,"originalColumn":34,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":957,"originalLine":33,"originalColumn":37,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"expression","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":977,"originalLine":33,"originalColumn":58,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":980,"originalLine":33,"originalColumn":59,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"expression","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":995,"originalLine":33,"originalColumn":75,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":1029,"originalLine":34,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":1052,"originalLine":35,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":1071,"originalLine":36,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":1097,"originalLine":37,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":1127,"originalLine":38,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":1139,"originalLine":39,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":1159,"originalLine":40,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":1179,"originalLine":41,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":1202,"originalLine":42,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":1214,"originalLine":43,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":1232,"originalLine":44,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":1245,"originalLine":45,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":1276,"originalLine":46,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":1301,"originalLine":47,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":1328,"originalLine":48,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":1358,"originalLine":49,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":1384,"originalLine":50,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":1428,"originalLine":51,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":1477,"originalLine":52,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":1516,"originalLine":53,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":1555,"originalLine":54,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":1573,"originalLine":55,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":1588,"originalLine":56,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":1602,"originalLine":57,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":1624,"originalLine":57,"originalColumn":21,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"expression","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":1645,"originalLine":57,"originalColumn":43,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":1661,"originalLine":58,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":1696,"originalLine":59,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":1711,"originalLine":60,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":1723,"originalLine":61,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":1744,"originalLine":62,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":1757,"originalLine":63,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":1806,"originalLine":64,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":1837,"originalLine":65,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":1863,"originalLine":66,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":1901,"originalLine":67,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":1992,"originalLine":67,"originalColumn":90,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"expression","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":2012,"originalLine":67,"originalColumn":111,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":2015,"originalLine":67,"originalColumn":112,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"expression","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":2030,"originalLine":67,"originalColumn":128,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":2074,"originalLine":68,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":2091,"originalLine":69,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":2106,"originalLine":70,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":2120,"originalLine":71,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":2133,"originalLine":72,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":2186,"originalLine":73,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":2221,"originalLine":74,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":2247,"originalLine":75,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":2285,"originalLine":76,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":2380,"originalLine":76,"originalColumn":94,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"expression","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":2400,"originalLine":76,"originalColumn":115,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":2403,"originalLine":76,"originalColumn":116,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"expression","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":2418,"originalLine":76,"originalColumn":132,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":2462,"originalLine":77,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":2479,"originalLine":78,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":2494,"originalLine":79,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":2507,"originalLine":80,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":2519,"originalLine":81,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":2541,"originalLine":82,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":2577,"originalLine":83,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":2659,"originalLine":83,"originalColumn":81,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"expression","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":2679,"originalLine":83,"originalColumn":102,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":2682,"originalLine":83,"originalColumn":103,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"expression","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":2697,"originalLine":83,"originalColumn":119,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":2729,"originalLine":84,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":2743,"originalLine":85,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":2786,"originalLine":86,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":2876,"originalLine":86,"originalColumn":89,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"expression","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":2896,"originalLine":86,"originalColumn":110,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":2899,"originalLine":86,"originalColumn":111,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"expression","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":2914,"originalLine":86,"originalColumn":127,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":2946,"originalLine":87,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":2959,"originalLine":88,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":2970,"originalLine":89,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":2981,"originalLine":90,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":3016,"originalLine":91,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"},{"generatedLine":13,"generatedColumn":3023,"originalLine":92,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.ListDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  filters:[],\n  extend:\"Modeleditor.view.base.baseWindowDictionaryList\",\n  iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  alias: \"widget.#{context.$widgetName}listdictionary\",\n  initComponent: function(){\n    const me = this\n    DirectCacheLogger.userStories('List Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n    Ext.apply(this,{\n      itemId: \"ListDictionary\",\n      listDictionary: true,\n      title: _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','ListDictionary'),\n      border: true,\n      layout: {\n        type:\"hbox\",\n        align: \"stretch\"\n      },\n      defaults:{\n        flex: 1,\n        margin: '2'\n      },\n      items: [\n        {\n          ...catalogConfig,\n          btns: true,\n          viewConfig: {\n            // copy: true,\n            plugins: {\n              ptype: 'gridviewdragdrop',\n              pluginId: \"gridviewdragdrop\",\n              dragGroup: 'catalog',\n              dropGroup: 'elements'\n            },\n          }\n        },\n        Ext.widget('#{context.$widgetName}elements', {\n          filters: this.filters\n        }),\n      ],\n      buttons : [\n        {\n          text: _t('Ok','SYSTEM', 'buttons'),\n          itemId: 'okMany',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel','SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('List Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('List Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});"}]}}