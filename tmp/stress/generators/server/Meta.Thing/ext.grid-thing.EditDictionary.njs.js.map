{"version":3,"sources":["generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"],"names":["text","code","expression"],"mappings":"AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAiBA,IAChBC;AADD,IACCA,AACAA;AAFD,IAECA,AACAA;AAHD,IAGCA,AAAED,IACFA,gCAA6BE,mBAAoBF,kBAAgBE,eAAgBF,SACjFA,kBAAgBE,yBAA0BF,MAC1CA,kBAAgBE,kBAAmBF,MACnCA,kEACAA,oBAAiBE,qBAAsBF,qBACvCA,iCAA+BE,oBAAqBF,GAACE,eAAgBF,IAAEC;AATxE,IASwEA,AAAwBD,OAAIE,iBAAkBF,IAACC;AATvH,IASuHA,AAAKD,MAC3HA,wCACAA,UACAA,mCACAA,8BACAA,4CACAA,iCACAA,UACAA,gCACAA,wBACAA,sFAAoFE,oBAAqBF,GAACE,eAAgBF,gCAC1HA,+BACAA,gBAAcE,qBAAsBF,aACpCA,SACAA,kDACAA,8DACAA,SACAA,gDACAA,0DACAA,SACAA,8CACAA,sDACAA,SACAA,6CACAA,oDACAA,SACAA,IACAA,wBACAA,qCACAA,+BACAA,mDAAgDE,eAAgBF,MAAGE,oBAAqBF,GAACE,eAAgBF,qCACzGA,uBACAA,wBACAA,oBACAA,0BACAA,uBACAA,YACAA,kBACAA,0BACAA,YACAA,oBACAA,aACAA,kDACAA,8BACAA,0BACAA,sCACAA,2FAAyFE,oBAAqBF,GAACE,eAAgBF,4CAC/HA,iBACAA,eACAA,cACAA,aACAA,sDACAA,mCACAA,0BACAA,sCACAA,+FAA6FE,oBAAqBF,GAACE,eAAgBF,4CACnIA,iBACAA,eACAA,aACAA,YACAA,sBACAA,oCACAA,kFAAgFE,oBAAqBF,GAACE,eAAgBF,gCACtHA,cACAA,2CACAA,0FAAwFE,oBAAqBF,GAACE,eAAgBF,gCAC9HA,aACAA,WACAA,UACAA,mCACAA,OACAA;AAhFD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","file":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","sourceRoot":"/Users/vedmalex/work/fte2/demo","sourcesContent":["<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"],"template":{"version":"1.0.0","segments":[{"generatedLine":1,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":2,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":3,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":4,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":5,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":6,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":7,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":8,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":9,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":10,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":11,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":12,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":13,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":14,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":15,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":16,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":17,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":18,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":19,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":20,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":21,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":22,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":23,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":24,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":25,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":26,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":27,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":28,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":29,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":30,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":31,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":32,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":33,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":34,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":35,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":36,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":37,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":38,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":39,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":40,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":41,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":42,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":43,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":44,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":45,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":46,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":47,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":48,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":49,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":50,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":51,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":52,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":53,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":54,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":55,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":56,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":57,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":58,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":59,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":60,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":61,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":62,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":63,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":64,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":65,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":66,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":67,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":68,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":69,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":70,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":71,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":72,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":73,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":74,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":75,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":76,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":77,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":78,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":79,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":80,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":81,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":82,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":83,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":84,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":85,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":86,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":87,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":88,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":89,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":90,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":91,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":92,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":93,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":94,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":95,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":96,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":97,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":98,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":99,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":100,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":101,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":102,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js"},{"generatedLine":8,"generatedColumn":4,"originalLine":1,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":8,"generatedColumn":8,"originalLine":2,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"code","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":9,"generatedColumn":4,"originalLine":2,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"code","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":9,"generatedColumn":4,"originalLine":3,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"code","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":10,"generatedColumn":4,"originalLine":3,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"code","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":10,"generatedColumn":4,"originalLine":4,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"code","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":11,"generatedColumn":4,"originalLine":4,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"code","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":11,"generatedColumn":4,"originalLine":4,"originalColumn":3,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":11,"generatedColumn":8,"originalLine":5,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":11,"generatedColumn":40,"originalLine":5,"originalColumn":30,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"expression","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":11,"generatedColumn":59,"originalLine":5,"originalColumn":50,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":11,"generatedColumn":77,"originalLine":5,"originalColumn":66,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"expression","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":11,"generatedColumn":92,"originalLine":5,"originalColumn":82,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":11,"generatedColumn":101,"originalLine":6,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":11,"generatedColumn":119,"originalLine":6,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"expression","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":11,"generatedColumn":144,"originalLine":6,"originalColumn":43,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":11,"generatedColumn":150,"originalLine":7,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":11,"generatedColumn":168,"originalLine":7,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"expression","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":11,"generatedColumn":186,"originalLine":7,"originalColumn":36,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":11,"generatedColumn":192,"originalLine":8,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":11,"generatedColumn":258,"originalLine":9,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":11,"generatedColumn":278,"originalLine":9,"originalColumn":18,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"expression","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":11,"generatedColumn":299,"originalLine":9,"originalColumn":40,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":11,"generatedColumn":320,"originalLine":10,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":11,"generatedColumn":353,"originalLine":10,"originalColumn":32,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"expression","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":11,"generatedColumn":373,"originalLine":10,"originalColumn":53,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":11,"generatedColumn":376,"originalLine":10,"originalColumn":54,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"expression","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":11,"generatedColumn":391,"originalLine":10,"originalColumn":70,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":11,"generatedColumn":395,"originalLine":10,"originalColumn":72,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"code","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":12,"generatedColumn":4,"originalLine":10,"originalColumn":72,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"code","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":12,"generatedColumn":4,"originalLine":10,"originalColumn":96,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":12,"generatedColumn":11,"originalLine":10,"originalColumn":100,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"expression","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":12,"generatedColumn":28,"originalLine":10,"originalColumn":118,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":12,"generatedColumn":32,"originalLine":10,"originalColumn":119,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"code","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":4,"originalLine":10,"originalColumn":119,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"code","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":4,"originalLine":10,"originalColumn":124,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":10,"originalLine":11,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":50,"originalLine":12,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":60,"originalLine":13,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":95,"originalLine":14,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":125,"originalLine":15,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":169,"originalLine":16,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":202,"originalLine":17,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":212,"originalLine":18,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":244,"originalLine":19,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":268,"originalLine":20,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":354,"originalLine":20,"originalColumn":85,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"expression","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":374,"originalLine":20,"originalColumn":106,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":377,"originalLine":20,"originalColumn":107,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"expression","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":392,"originalLine":20,"originalColumn":123,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":424,"originalLine":21,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":455,"originalLine":22,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":471,"originalLine":22,"originalColumn":15,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"expression","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":492,"originalLine":22,"originalColumn":37,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":505,"originalLine":23,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":514,"originalLine":24,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":564,"originalLine":25,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":626,"originalLine":26,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":635,"originalLine":27,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":683,"originalLine":28,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":741,"originalLine":29,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":750,"originalLine":30,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":796,"originalLine":31,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":850,"originalLine":32,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":859,"originalLine":33,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":904,"originalLine":34,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":956,"originalLine":35,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":965,"originalLine":36,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":969,"originalLine":37,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":993,"originalLine":38,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":1030,"originalLine":39,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":1061,"originalLine":40,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":1112,"originalLine":40,"originalColumn":49,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"expression","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":1127,"originalLine":40,"originalColumn":65,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":1133,"originalLine":40,"originalColumn":68,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"expression","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":1153,"originalLine":40,"originalColumn":89,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":1156,"originalLine":40,"originalColumn":90,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"expression","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":1171,"originalLine":40,"originalColumn":106,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":1208,"originalLine":41,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":1231,"originalLine":42,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":1255,"originalLine":43,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":1275,"originalLine":44,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":1301,"originalLine":45,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":1324,"originalLine":46,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":1336,"originalLine":47,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":1354,"originalLine":48,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":1380,"originalLine":49,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":1392,"originalLine":50,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":1412,"originalLine":51,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":1425,"originalLine":52,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":1475,"originalLine":53,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":1505,"originalLine":54,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":1531,"originalLine":55,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":1569,"originalLine":56,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":1660,"originalLine":56,"originalColumn":90,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"expression","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":1680,"originalLine":56,"originalColumn":111,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":1683,"originalLine":56,"originalColumn":112,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"expression","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":1698,"originalLine":56,"originalColumn":128,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":1742,"originalLine":57,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":1759,"originalLine":58,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":1774,"originalLine":59,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":1788,"originalLine":60,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":1801,"originalLine":61,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":1855,"originalLine":62,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":1890,"originalLine":63,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":1916,"originalLine":64,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":1954,"originalLine":65,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":2049,"originalLine":65,"originalColumn":94,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"expression","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":2069,"originalLine":65,"originalColumn":115,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":2072,"originalLine":65,"originalColumn":116,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"expression","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":2087,"originalLine":65,"originalColumn":132,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":2131,"originalLine":66,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":2148,"originalLine":67,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":2163,"originalLine":68,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":2176,"originalLine":69,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":2188,"originalLine":70,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":2210,"originalLine":71,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":2246,"originalLine":72,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":2328,"originalLine":72,"originalColumn":81,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"expression","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":2348,"originalLine":72,"originalColumn":102,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":2351,"originalLine":72,"originalColumn":103,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"expression","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":2366,"originalLine":72,"originalColumn":119,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":2398,"originalLine":73,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":2412,"originalLine":74,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":2455,"originalLine":75,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":2545,"originalLine":75,"originalColumn":89,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"expression","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":2565,"originalLine":75,"originalColumn":110,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":2568,"originalLine":75,"originalColumn":111,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"expression","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":2583,"originalLine":75,"originalColumn":127,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":2615,"originalLine":76,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":2628,"originalLine":77,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":2639,"originalLine":78,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":2649,"originalLine":79,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":2684,"originalLine":80,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":2691,"originalLine":81,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.EditDictionary.njs.js","name":"text","content":"<#@ noContent #>\n<#\nconst config = context.getThingConfig(context)\n#>\nExt.define(\"Modeleditor.view.#{context.namespace}.EditDictionary.#{context.$name}\", {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend:\"Modeleditor.view.base.baseWindowDictionarySingle\",\n  alias: \"widget.#{context.$widgetName}editdictionary\",\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}')<#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  // tobe passed from Dictinary Call\n  // {\n  //   catalogPaginator: false,\n  //   catalogPlugins: [],\n  //   catalogStore: customFieldsetStore\n  //   catalogBbar: undefined\n  // }\n  initComponent: function(){\n    const me = this;\n    DirectCacheLogger.userStories('Edit Dictionary Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n    const catalogConfig = {\n      xtype: '#{context.$widgetName}catalog',\n    }\n    if(me.hasOwnProperty('catalogPaginator')){\n      catalogConfig.catalogPaginator = me.catalogPaginator\n    }\n    if(me.hasOwnProperty('catalogPlugins')){\n      catalogConfig.catalogPlugins = me.catalogPlugins\n    }\n    if(me.hasOwnProperty('catalogStore')){\n      catalogConfig.catalogStore = me.catalogStore\n    }\n    if(me.hasOwnProperty('catalogBbar')){\n      catalogConfig.catalogBbar = me.catalogBbar\n    }\n\n    Ext.apply(this,{\n      itemId: \"EditDictionary\",\n      editDictionary: true,\n      title: this.title || this.toDisplay ||_t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles', 'EditDictionary', ),\n      border: true,\n      layout: 'fit',\n      defaults:{\n        border: false,\n        margin: '2'\n      },\n      items: [\n        catalogConfig,\n      ],\n      buttons: [\n        {\n          text: _t('Ok', 'SYSTEM', 'buttons'),\n          itemId: 'okOne',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary OK Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        },\n        {\n          text: _t('Cancel', 'SYSTEM', 'buttons'),\n          itemId: 'dictCancel',\n          listeners: {\n            click: function(btn) {\n              DirectCacheLogger.userStories('Edit Dictionary Cancel Button', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: btn.up('window').id });\n            }\n          }\n        }\n      ],\n      listeners: {\n        show: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Show', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        },\n        beforeclose: function(window) {\n          DirectCacheLogger.userStories('Edit Dictionary Before Close', { serverModel: '#{context.$namespace}.#{context.$name}', dictionaryId: this.id });\n        }\n      }\n    })\n    this.callParent(arguments);\n  }\n});\n"}]}}