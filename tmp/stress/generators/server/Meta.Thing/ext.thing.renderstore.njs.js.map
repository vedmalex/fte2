{"version":3,"sources":["generators/server/Meta.Thing/ext.thing.renderstore.njs.js"],"names":["code","text","expression"],"mappings":"AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IACCA;AADD,IACCA,AACAA;AAFD,IAECA,AACAA;AAHD,IAGCA,AACAA;AAJD,IAICA,AAAEC,IACFA,IACAA,kCAAgCC,oBAAqBD,GAACC,eAAgBD,QACtEA,mCACAA,eACAA,mBAAiBC,oBAAqBD,GAACC,eAAgBD,MAC/CD;AAVT,IAUSA,AACRA;AAXD,IAWCA,AACAA;AAZD,IAYCA,AACAA;AAbD,IAaCA,AACAA;AAdD,IAcCA,AACAA;AAfD,IAeCA,AAAmCC,IACnCA,YAAUC,uCAAwCD,SAClDA,YAAUD;AAjBX,IAiBWA,AACVA;AAlBD,IAkBCA,AACAA;AAnBD,IAmBCA,AACAA;AApBD,IAoBCA,AAAUC,IACVA,YAAUC,uCAAwCD,+BAA6BC,oBAAqBD,GAACC,eAAgBD,mBAAiBC,uBAAwBD,gBACtJD;AAtBT,IAsBSA,AACAA;AAvBT,IAuBSA,AAAOC,IACfA,UACAA,QACAA;AA1BD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","file":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js","sourceRoot":"/Users/vedmalex/work/fte2/demo","sourcesContent":["<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n#>\n\nExt.define('Grainjs.renderstore.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'renderstore.#{context.$namespace}.#{context.$name}': {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated && f.comboForcePreload)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}:Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}']?.store?.(),\n        <#- } } #>\n        <#- }#>\n    },\n  },\n})\n\n\n"],"template":{"version":"1.0.0","segments":[{"generatedLine":1,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js"},{"generatedLine":2,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js"},{"generatedLine":3,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js"},{"generatedLine":4,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js"},{"generatedLine":5,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js"},{"generatedLine":6,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js"},{"generatedLine":7,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js"},{"generatedLine":8,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js"},{"generatedLine":9,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js"},{"generatedLine":10,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js"},{"generatedLine":11,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js"},{"generatedLine":12,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js"},{"generatedLine":13,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js"},{"generatedLine":14,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js"},{"generatedLine":15,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js"},{"generatedLine":16,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js"},{"generatedLine":17,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js"},{"generatedLine":18,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js"},{"generatedLine":19,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js"},{"generatedLine":20,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js"},{"generatedLine":21,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js"},{"generatedLine":22,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js"},{"generatedLine":23,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js"},{"generatedLine":24,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js"},{"generatedLine":25,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js"},{"generatedLine":26,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js"},{"generatedLine":27,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js"},{"generatedLine":28,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js"},{"generatedLine":29,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js"},{"generatedLine":30,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js"},{"generatedLine":31,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js"},{"generatedLine":32,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js"},{"generatedLine":33,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js"},{"generatedLine":34,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js"},{"generatedLine":35,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js"},{"generatedLine":36,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js"},{"generatedLine":37,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js"},{"generatedLine":38,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js"},{"generatedLine":39,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js"},{"generatedLine":40,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js"},{"generatedLine":41,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js"},{"generatedLine":42,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js"},{"generatedLine":43,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js"},{"generatedLine":44,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js"},{"generatedLine":45,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js"},{"generatedLine":46,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js"},{"generatedLine":47,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js"},{"generatedLine":8,"generatedColumn":4,"originalLine":2,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n#>\n\nExt.define('Grainjs.renderstore.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'renderstore.#{context.$namespace}.#{context.$name}': {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated && f.comboForcePreload)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}:Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}']?.store?.(),\n        <#- } } #>\n        <#- }#>\n    },\n  },\n})\n\n\n"},{"generatedLine":9,"generatedColumn":4,"originalLine":2,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n#>\n\nExt.define('Grainjs.renderstore.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'renderstore.#{context.$namespace}.#{context.$name}': {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated && f.comboForcePreload)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}:Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}']?.store?.(),\n        <#- } } #>\n        <#- }#>\n    },\n  },\n})\n\n\n"},{"generatedLine":9,"generatedColumn":4,"originalLine":3,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n#>\n\nExt.define('Grainjs.renderstore.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'renderstore.#{context.$namespace}.#{context.$name}': {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated && f.comboForcePreload)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}:Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}']?.store?.(),\n        <#- } } #>\n        <#- }#>\n    },\n  },\n})\n\n\n"},{"generatedLine":10,"generatedColumn":4,"originalLine":3,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n#>\n\nExt.define('Grainjs.renderstore.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'renderstore.#{context.$namespace}.#{context.$name}': {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated && f.comboForcePreload)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}:Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}']?.store?.(),\n        <#- } } #>\n        <#- }#>\n    },\n  },\n})\n\n\n"},{"generatedLine":10,"generatedColumn":4,"originalLine":4,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n#>\n\nExt.define('Grainjs.renderstore.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'renderstore.#{context.$namespace}.#{context.$name}': {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated && f.comboForcePreload)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}:Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}']?.store?.(),\n        <#- } } #>\n        <#- }#>\n    },\n  },\n})\n\n\n"},{"generatedLine":11,"generatedColumn":4,"originalLine":4,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n#>\n\nExt.define('Grainjs.renderstore.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'renderstore.#{context.$namespace}.#{context.$name}': {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated && f.comboForcePreload)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}:Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}']?.store?.(),\n        <#- } } #>\n        <#- }#>\n    },\n  },\n})\n\n\n"},{"generatedLine":11,"generatedColumn":4,"originalLine":5,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n#>\n\nExt.define('Grainjs.renderstore.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'renderstore.#{context.$namespace}.#{context.$name}': {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated && f.comboForcePreload)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}:Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}']?.store?.(),\n        <#- } } #>\n        <#- }#>\n    },\n  },\n})\n\n\n"},{"generatedLine":12,"generatedColumn":4,"originalLine":5,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n#>\n\nExt.define('Grainjs.renderstore.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'renderstore.#{context.$namespace}.#{context.$name}': {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated && f.comboForcePreload)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}:Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}']?.store?.(),\n        <#- } } #>\n        <#- }#>\n    },\n  },\n})\n\n\n"},{"generatedLine":12,"generatedColumn":4,"originalLine":5,"originalColumn":3,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n#>\n\nExt.define('Grainjs.renderstore.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'renderstore.#{context.$namespace}.#{context.$name}': {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated && f.comboForcePreload)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}:Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}']?.store?.(),\n        <#- } } #>\n        <#- }#>\n    },\n  },\n})\n\n\n"},{"generatedLine":12,"generatedColumn":8,"originalLine":6,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n#>\n\nExt.define('Grainjs.renderstore.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'renderstore.#{context.$namespace}.#{context.$name}': {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated && f.comboForcePreload)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}:Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}']?.store?.(),\n        <#- } } #>\n        <#- }#>\n    },\n  },\n})\n\n\n"},{"generatedLine":12,"generatedColumn":12,"originalLine":7,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n#>\n\nExt.define('Grainjs.renderstore.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'renderstore.#{context.$namespace}.#{context.$name}': {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated && f.comboForcePreload)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}:Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}']?.store?.(),\n        <#- } } #>\n        <#- }#>\n    },\n  },\n})\n\n\n"},{"generatedLine":12,"generatedColumn":46,"originalLine":7,"originalColumn":33,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n#>\n\nExt.define('Grainjs.renderstore.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'renderstore.#{context.$namespace}.#{context.$name}': {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated && f.comboForcePreload)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}:Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}']?.store?.(),\n        <#- } } #>\n        <#- }#>\n    },\n  },\n})\n\n\n"},{"generatedLine":12,"generatedColumn":66,"originalLine":7,"originalColumn":54,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n#>\n\nExt.define('Grainjs.renderstore.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'renderstore.#{context.$namespace}.#{context.$name}': {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated && f.comboForcePreload)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}:Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}']?.store?.(),\n        <#- } } #>\n        <#- }#>\n    },\n  },\n})\n\n\n"},{"generatedLine":12,"generatedColumn":69,"originalLine":7,"originalColumn":55,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n#>\n\nExt.define('Grainjs.renderstore.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'renderstore.#{context.$namespace}.#{context.$name}': {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated && f.comboForcePreload)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}:Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}']?.store?.(),\n        <#- } } #>\n        <#- }#>\n    },\n  },\n})\n\n\n"},{"generatedLine":12,"generatedColumn":84,"originalLine":7,"originalColumn":71,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n#>\n\nExt.define('Grainjs.renderstore.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'renderstore.#{context.$namespace}.#{context.$name}': {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated && f.comboForcePreload)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}:Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}']?.store?.(),\n        <#- } } #>\n        <#- }#>\n    },\n  },\n})\n\n\n"},{"generatedLine":12,"generatedColumn":92,"originalLine":8,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n#>\n\nExt.define('Grainjs.renderstore.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'renderstore.#{context.$namespace}.#{context.$name}': {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated && f.comboForcePreload)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}:Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}']?.store?.(),\n        <#- } } #>\n        <#- }#>\n    },\n  },\n})\n\n\n"},{"generatedLine":12,"generatedColumn":127,"originalLine":9,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n#>\n\nExt.define('Grainjs.renderstore.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'renderstore.#{context.$namespace}.#{context.$name}': {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated && f.comboForcePreload)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}:Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}']?.store?.(),\n        <#- } } #>\n        <#- }#>\n    },\n  },\n})\n\n\n"},{"generatedLine":12,"generatedColumn":142,"originalLine":10,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n#>\n\nExt.define('Grainjs.renderstore.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'renderstore.#{context.$namespace}.#{context.$name}': {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated && f.comboForcePreload)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}:Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}']?.store?.(),\n        <#- } } #>\n        <#- }#>\n    },\n  },\n})\n\n\n"},{"generatedLine":12,"generatedColumn":161,"originalLine":10,"originalColumn":18,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n#>\n\nExt.define('Grainjs.renderstore.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'renderstore.#{context.$namespace}.#{context.$name}': {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated && f.comboForcePreload)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}:Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}']?.store?.(),\n        <#- } } #>\n        <#- }#>\n    },\n  },\n})\n\n\n"},{"generatedLine":12,"generatedColumn":181,"originalLine":10,"originalColumn":39,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n#>\n\nExt.define('Grainjs.renderstore.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'renderstore.#{context.$namespace}.#{context.$name}': {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated && f.comboForcePreload)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}:Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}']?.store?.(),\n        <#- } } #>\n        <#- }#>\n    },\n  },\n})\n\n\n"},{"generatedLine":12,"generatedColumn":184,"originalLine":10,"originalColumn":40,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n#>\n\nExt.define('Grainjs.renderstore.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'renderstore.#{context.$namespace}.#{context.$name}': {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated && f.comboForcePreload)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}:Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}']?.store?.(),\n        <#- } } #>\n        <#- }#>\n    },\n  },\n})\n\n\n"},{"generatedLine":12,"generatedColumn":199,"originalLine":10,"originalColumn":56,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n#>\n\nExt.define('Grainjs.renderstore.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'renderstore.#{context.$namespace}.#{context.$name}': {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated && f.comboForcePreload)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}:Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}']?.store?.(),\n        <#- } } #>\n        <#- }#>\n    },\n  },\n})\n\n\n"},{"generatedLine":12,"generatedColumn":205,"originalLine":11,"originalColumn":9,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n#>\n\nExt.define('Grainjs.renderstore.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'renderstore.#{context.$namespace}.#{context.$name}': {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated && f.comboForcePreload)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}:Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}']?.store?.(),\n        <#- } } #>\n        <#- }#>\n    },\n  },\n})\n\n\n"},{"generatedLine":13,"generatedColumn":4,"originalLine":11,"originalColumn":9,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n#>\n\nExt.define('Grainjs.renderstore.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'renderstore.#{context.$namespace}.#{context.$name}': {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated && f.comboForcePreload)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}:Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}']?.store?.(),\n        <#- } } #>\n        <#- }#>\n    },\n  },\n})\n\n\n"},{"generatedLine":13,"generatedColumn":4,"originalLine":12,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n#>\n\nExt.define('Grainjs.renderstore.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'renderstore.#{context.$namespace}.#{context.$name}': {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated && f.comboForcePreload)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}:Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}']?.store?.(),\n        <#- } } #>\n        <#- }#>\n    },\n  },\n})\n\n\n"},{"generatedLine":14,"generatedColumn":4,"originalLine":12,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n#>\n\nExt.define('Grainjs.renderstore.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'renderstore.#{context.$namespace}.#{context.$name}': {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated && f.comboForcePreload)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}:Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}']?.store?.(),\n        <#- } } #>\n        <#- }#>\n    },\n  },\n})\n\n\n"},{"generatedLine":14,"generatedColumn":4,"originalLine":13,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n#>\n\nExt.define('Grainjs.renderstore.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'renderstore.#{context.$namespace}.#{context.$name}': {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated && f.comboForcePreload)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}:Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}']?.store?.(),\n        <#- } } #>\n        <#- }#>\n    },\n  },\n})\n\n\n"},{"generatedLine":15,"generatedColumn":4,"originalLine":13,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n#>\n\nExt.define('Grainjs.renderstore.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'renderstore.#{context.$namespace}.#{context.$name}': {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated && f.comboForcePreload)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}:Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}']?.store?.(),\n        <#- } } #>\n        <#- }#>\n    },\n  },\n})\n\n\n"},{"generatedLine":15,"generatedColumn":4,"originalLine":14,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n#>\n\nExt.define('Grainjs.renderstore.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'renderstore.#{context.$namespace}.#{context.$name}': {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated && f.comboForcePreload)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}:Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}']?.store?.(),\n        <#- } } #>\n        <#- }#>\n    },\n  },\n})\n\n\n"},{"generatedLine":16,"generatedColumn":4,"originalLine":14,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n#>\n\nExt.define('Grainjs.renderstore.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'renderstore.#{context.$namespace}.#{context.$name}': {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated && f.comboForcePreload)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}:Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}']?.store?.(),\n        <#- } } #>\n        <#- }#>\n    },\n  },\n})\n\n\n"},{"generatedLine":16,"generatedColumn":4,"originalLine":15,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n#>\n\nExt.define('Grainjs.renderstore.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'renderstore.#{context.$namespace}.#{context.$name}': {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated && f.comboForcePreload)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}:Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}']?.store?.(),\n        <#- } } #>\n        <#- }#>\n    },\n  },\n})\n\n\n"},{"generatedLine":17,"generatedColumn":4,"originalLine":15,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n#>\n\nExt.define('Grainjs.renderstore.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'renderstore.#{context.$namespace}.#{context.$name}': {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated && f.comboForcePreload)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}:Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}']?.store?.(),\n        <#- } } #>\n        <#- }#>\n    },\n  },\n})\n\n\n"},{"generatedLine":17,"generatedColumn":4,"originalLine":16,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n#>\n\nExt.define('Grainjs.renderstore.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'renderstore.#{context.$namespace}.#{context.$name}': {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated && f.comboForcePreload)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}:Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}']?.store?.(),\n        <#- } } #>\n        <#- }#>\n    },\n  },\n})\n\n\n"},{"generatedLine":18,"generatedColumn":4,"originalLine":16,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n#>\n\nExt.define('Grainjs.renderstore.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'renderstore.#{context.$namespace}.#{context.$name}': {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated && f.comboForcePreload)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}:Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}']?.store?.(),\n        <#- } } #>\n        <#- }#>\n    },\n  },\n})\n\n\n"},{"generatedLine":18,"generatedColumn":4,"originalLine":16,"originalColumn":36,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n#>\n\nExt.define('Grainjs.renderstore.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'renderstore.#{context.$namespace}.#{context.$name}': {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated && f.comboForcePreload)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}:Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}']?.store?.(),\n        <#- } } #>\n        <#- }#>\n    },\n  },\n})\n\n\n"},{"generatedLine":18,"generatedColumn":8,"originalLine":17,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n#>\n\nExt.define('Grainjs.renderstore.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'renderstore.#{context.$namespace}.#{context.$name}': {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated && f.comboForcePreload)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}:Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}']?.store?.(),\n        <#- } } #>\n        <#- }#>\n    },\n  },\n})\n\n\n"},{"generatedLine":18,"generatedColumn":20,"originalLine":17,"originalColumn":11,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n#>\n\nExt.define('Grainjs.renderstore.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'renderstore.#{context.$namespace}.#{context.$name}': {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated && f.comboForcePreload)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}:Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}']?.store?.(),\n        <#- } } #>\n        <#- }#>\n    },\n  },\n})\n\n\n"},{"generatedLine":18,"generatedColumn":59,"originalLine":17,"originalColumn":51,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n#>\n\nExt.define('Grainjs.renderstore.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'renderstore.#{context.$namespace}.#{context.$name}': {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated && f.comboForcePreload)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}:Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}']?.store?.(),\n        <#- } } #>\n        <#- }#>\n    },\n  },\n})\n\n\n"},{"generatedLine":18,"generatedColumn":68,"originalLine":18,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n#>\n\nExt.define('Grainjs.renderstore.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'renderstore.#{context.$namespace}.#{context.$name}': {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated && f.comboForcePreload)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}:Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}']?.store?.(),\n        <#- } } #>\n        <#- }#>\n    },\n  },\n})\n\n\n"},{"generatedLine":18,"generatedColumn":80,"originalLine":18,"originalColumn":11,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n#>\n\nExt.define('Grainjs.renderstore.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'renderstore.#{context.$namespace}.#{context.$name}': {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated && f.comboForcePreload)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}:Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}']?.store?.(),\n        <#- } } #>\n        <#- }#>\n    },\n  },\n})\n\n\n"},{"generatedLine":19,"generatedColumn":4,"originalLine":18,"originalColumn":11,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n#>\n\nExt.define('Grainjs.renderstore.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'renderstore.#{context.$namespace}.#{context.$name}': {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated && f.comboForcePreload)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}:Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}']?.store?.(),\n        <#- } } #>\n        <#- }#>\n    },\n  },\n})\n\n\n"},{"generatedLine":19,"generatedColumn":4,"originalLine":19,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n#>\n\nExt.define('Grainjs.renderstore.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'renderstore.#{context.$namespace}.#{context.$name}': {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated && f.comboForcePreload)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}:Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}']?.store?.(),\n        <#- } } #>\n        <#- }#>\n    },\n  },\n})\n\n\n"},{"generatedLine":20,"generatedColumn":4,"originalLine":19,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n#>\n\nExt.define('Grainjs.renderstore.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'renderstore.#{context.$namespace}.#{context.$name}': {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated && f.comboForcePreload)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}:Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}']?.store?.(),\n        <#- } } #>\n        <#- }#>\n    },\n  },\n})\n\n\n"},{"generatedLine":20,"generatedColumn":4,"originalLine":20,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n#>\n\nExt.define('Grainjs.renderstore.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'renderstore.#{context.$namespace}.#{context.$name}': {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated && f.comboForcePreload)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}:Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}']?.store?.(),\n        <#- } } #>\n        <#- }#>\n    },\n  },\n})\n\n\n"},{"generatedLine":21,"generatedColumn":4,"originalLine":20,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n#>\n\nExt.define('Grainjs.renderstore.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'renderstore.#{context.$namespace}.#{context.$name}': {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated && f.comboForcePreload)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}:Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}']?.store?.(),\n        <#- } } #>\n        <#- }#>\n    },\n  },\n})\n\n\n"},{"generatedLine":21,"generatedColumn":4,"originalLine":21,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n#>\n\nExt.define('Grainjs.renderstore.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'renderstore.#{context.$namespace}.#{context.$name}': {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated && f.comboForcePreload)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}:Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}']?.store?.(),\n        <#- } } #>\n        <#- }#>\n    },\n  },\n})\n\n\n"},{"generatedLine":22,"generatedColumn":4,"originalLine":21,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n#>\n\nExt.define('Grainjs.renderstore.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'renderstore.#{context.$namespace}.#{context.$name}': {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated && f.comboForcePreload)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}:Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}']?.store?.(),\n        <#- } } #>\n        <#- }#>\n    },\n  },\n})\n\n\n"},{"generatedLine":22,"generatedColumn":4,"originalLine":21,"originalColumn":11,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n#>\n\nExt.define('Grainjs.renderstore.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'renderstore.#{context.$namespace}.#{context.$name}': {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated && f.comboForcePreload)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}:Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}']?.store?.(),\n        <#- } } #>\n        <#- }#>\n    },\n  },\n})\n\n\n"},{"generatedLine":22,"generatedColumn":8,"originalLine":22,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n#>\n\nExt.define('Grainjs.renderstore.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'renderstore.#{context.$namespace}.#{context.$name}': {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated && f.comboForcePreload)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}:Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}']?.store?.(),\n        <#- } } #>\n        <#- }#>\n    },\n  },\n})\n\n\n"},{"generatedLine":22,"generatedColumn":20,"originalLine":22,"originalColumn":11,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n#>\n\nExt.define('Grainjs.renderstore.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'renderstore.#{context.$namespace}.#{context.$name}': {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated && f.comboForcePreload)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}:Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}']?.store?.(),\n        <#- } } #>\n        <#- }#>\n    },\n  },\n})\n\n\n"},{"generatedLine":22,"generatedColumn":59,"originalLine":22,"originalColumn":51,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n#>\n\nExt.define('Grainjs.renderstore.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'renderstore.#{context.$namespace}.#{context.$name}': {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated && f.comboForcePreload)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}:Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}']?.store?.(),\n        <#- } } #>\n        <#- }#>\n    },\n  },\n})\n\n\n"},{"generatedLine":22,"generatedColumn":90,"originalLine":22,"originalColumn":80,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n#>\n\nExt.define('Grainjs.renderstore.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'renderstore.#{context.$namespace}.#{context.$name}': {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated && f.comboForcePreload)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}:Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}']?.store?.(),\n        <#- } } #>\n        <#- }#>\n    },\n  },\n})\n\n\n"},{"generatedLine":22,"generatedColumn":110,"originalLine":22,"originalColumn":101,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n#>\n\nExt.define('Grainjs.renderstore.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'renderstore.#{context.$namespace}.#{context.$name}': {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated && f.comboForcePreload)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}:Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}']?.store?.(),\n        <#- } } #>\n        <#- }#>\n    },\n  },\n})\n\n\n"},{"generatedLine":22,"generatedColumn":113,"originalLine":22,"originalColumn":102,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n#>\n\nExt.define('Grainjs.renderstore.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'renderstore.#{context.$namespace}.#{context.$name}': {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated && f.comboForcePreload)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}:Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}']?.store?.(),\n        <#- } } #>\n        <#- }#>\n    },\n  },\n})\n\n\n"},{"generatedLine":22,"generatedColumn":128,"originalLine":22,"originalColumn":118,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n#>\n\nExt.define('Grainjs.renderstore.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'renderstore.#{context.$namespace}.#{context.$name}': {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated && f.comboForcePreload)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}:Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}']?.store?.(),\n        <#- } } #>\n        <#- }#>\n    },\n  },\n})\n\n\n"},{"generatedLine":22,"generatedColumn":147,"originalLine":22,"originalColumn":135,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n#>\n\nExt.define('Grainjs.renderstore.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'renderstore.#{context.$namespace}.#{context.$name}': {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated && f.comboForcePreload)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}:Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}']?.store?.(),\n        <#- } } #>\n        <#- }#>\n    },\n  },\n})\n\n\n"},{"generatedLine":22,"generatedColumn":170,"originalLine":22,"originalColumn":159,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n#>\n\nExt.define('Grainjs.renderstore.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'renderstore.#{context.$namespace}.#{context.$name}': {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated && f.comboForcePreload)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}:Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}']?.store?.(),\n        <#- } } #>\n        <#- }#>\n    },\n  },\n})\n\n\n"},{"generatedLine":22,"generatedColumn":186,"originalLine":23,"originalColumn":9,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n#>\n\nExt.define('Grainjs.renderstore.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'renderstore.#{context.$namespace}.#{context.$name}': {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated && f.comboForcePreload)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}:Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}']?.store?.(),\n        <#- } } #>\n        <#- }#>\n    },\n  },\n})\n\n\n"},{"generatedLine":23,"generatedColumn":4,"originalLine":23,"originalColumn":9,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n#>\n\nExt.define('Grainjs.renderstore.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'renderstore.#{context.$namespace}.#{context.$name}': {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated && f.comboForcePreload)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}:Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}']?.store?.(),\n        <#- } } #>\n        <#- }#>\n    },\n  },\n})\n\n\n"},{"generatedLine":23,"generatedColumn":4,"originalLine":24,"originalColumn":9,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n#>\n\nExt.define('Grainjs.renderstore.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'renderstore.#{context.$namespace}.#{context.$name}': {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated && f.comboForcePreload)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}:Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}']?.store?.(),\n        <#- } } #>\n        <#- }#>\n    },\n  },\n})\n\n\n"},{"generatedLine":24,"generatedColumn":4,"originalLine":24,"originalColumn":9,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n#>\n\nExt.define('Grainjs.renderstore.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'renderstore.#{context.$namespace}.#{context.$name}': {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated && f.comboForcePreload)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}:Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}']?.store?.(),\n        <#- } } #>\n        <#- }#>\n    },\n  },\n})\n\n\n"},{"generatedLine":24,"generatedColumn":4,"originalLine":24,"originalColumn":16,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n#>\n\nExt.define('Grainjs.renderstore.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'renderstore.#{context.$namespace}.#{context.$name}': {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated && f.comboForcePreload)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}:Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}']?.store?.(),\n        <#- } } #>\n        <#- }#>\n    },\n  },\n})\n\n\n"},{"generatedLine":24,"generatedColumn":8,"originalLine":25,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n#>\n\nExt.define('Grainjs.renderstore.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'renderstore.#{context.$namespace}.#{context.$name}': {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated && f.comboForcePreload)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}:Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}']?.store?.(),\n        <#- } } #>\n        <#- }#>\n    },\n  },\n})\n\n\n"},{"generatedLine":24,"generatedColumn":18,"originalLine":26,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n#>\n\nExt.define('Grainjs.renderstore.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'renderstore.#{context.$namespace}.#{context.$name}': {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated && f.comboForcePreload)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}:Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}']?.store?.(),\n        <#- } } #>\n        <#- }#>\n    },\n  },\n})\n\n\n"},{"generatedLine":24,"generatedColumn":26,"originalLine":27,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.thing.renderstore.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n#>\n\nExt.define('Grainjs.renderstore.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'renderstore.#{context.$namespace}.#{context.$name}': {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated && f.comboForcePreload)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}:Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}']?.store?.(),\n        <#- } } #>\n        <#- }#>\n    },\n  },\n})\n\n\n"}]}}