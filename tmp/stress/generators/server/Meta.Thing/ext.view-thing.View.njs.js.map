{"version":3,"sources":["generators/server/Meta.Thing/ext.view-thing.View.njs.js"],"names":["text","code","expression"],"mappings":"AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAiBA,IAChBC;AADD,IACCA,AACAA;AAFD,IAECA,AACAA;AAHD,IAGCA,AACAA;AAJD,IAICA,AACAA;AALD,IAKCA,AACAA;AAND,IAMCA,AACAA;AAPD,IAOCA,AACAA;AARD,IAQCA,AAAED,+BAA6BE,oBAAqBF,QAAME,eAAgBF,QAC1EA,kBAAgBE,yBAA0BF,MAC1CA,kBAAgBE,kBAAmBF,MACnCA,+CACAA,mBAAiBE,qBAAsBF,UACvCA,mCAAiCE,oBAAqBF,GAACE,eAAgBF,OACvEA,uBACAA,oBACAA,aAAWE,qBAAsBF,MACjCC;AAjBD,IAiBCA,AAAgCD,IAChCA,qBACAA,YAAUE,4BAA6BF,MACvCA,UAAQE,0BAA2BF,MACnCA,oBAAkBE,oCAAqCF,MACvDA,kBAAgBE,kCAAmCF,MACnDA,QACAC;AAxBD,IAwBCA,AAAOD,IACPA,IACAA,eAAaE,oBAAqBA,eAAgBF,MAClDA,kCAAgCE,oBAAqBF,GAACE,eAAgBF,MACtEA,iBACAA,0BACAA,2BACAA,sBACAA,QACAA,iCACAA,gFAA8EE,oBAAqBF,GAACE,eAAgBF,0BACpHA,wBACAA,kBACAA,aACAA,yBACAA,sDACAA,0BACAA,cACAA,aACAA,0BACAA,sDACAA,0BACAA,cACAA,UAAQC;AA/CT,IA+CSA,AACRA;AAhDD,IAgDCA,AACAA;AAjDD,IAiDCA,AACAA;AAlDD,IAkDCA,AACAA;AAnDD,IAmDCA,AACAA;AApDD,IAoDCA,AACAA;AArDD,IAqDCA,AACAA;AAtDD,IAsDCA,AACAA;AAvDD,IAuDCA,AACAA;AAxDD,IAwDCA,AACAA;AAzDD,IAyDCA,AACAA;AA1DD,IA0DCA,AACAA;AA3DD,IA2DCA,AAAoBD,IACpBA,iDAA+CE,oBAAqBF,GAACE,eAAgBF,MAAIE,uBAAwBF,IAAEE,eAAgBF,OACnIA,kBAAgBC;AA7DjB,IA6DiBA,AAChBA;AA9DD,IA8DCA,AACAA;AA/DD,IA+DCA,AACAA;AAhED,IAgECA,AACAA;AAjED,IAiECA,AACAA;AAlED,IAkECA,AAAgBD,IAChBA,gDAA8CE,oBAAqBF,GAACE,eAAgBF,MAAIE,gBAAiBF,QACzGA,kBAAgBC;AApEjB,IAoEiBA,AAChBA;AArED,IAqECA,AACAA;AAtED,IAsECA,AAAgBD,OAChBA,gBAAcC;AAvEf,IAuEeA,AACdA;AAxED,IAwECA,AACAA;AAzED,IAyECA,AACAA;AA1ED,IA0ECA,AACAA;AA3ED,IA2ECA,AACAA;AA5ED,IA4ECA,AACAA;AA7ED,IA6ECA,AACAA;AA9ED,IA8ECA,AACAA;AA/ED,IA+ECA,AACAA;AAhFD,IAgFCA,AACAA;AAjFD,IAiFCA,AACAA;AAlFD,IAkFCA,AACAA;AAnFD,IAmFCA,AAAoBD,IACpBA,iDAA+CE,oBAAqBF,GAACE,eAAgBF,MAAIE,uBAAwBF,IAAEE,eAAgBF,OACnIA,kBAAgBC;AArFjB,IAqFiBA,AAChBA;AAtFD,IAsFCA,AACAA;AAvFD,IAuFCA,AACAA;AAxFD,IAwFCA,AACAA;AAzFD,IAyFCA,AACAA;AA1FD,IA0FCA,AAAgBD,IAChBA,gDAA8CE,oBAAqBF,GAACE,eAAgBF,MAAIE,gBAAiBF,QACzGA,kBAAgBC;AA5FjB,IA4FiBA,AAChBA;AA7FD,IA6FCA,AACAA;AA9FD,IA8FCA,AAAgBD,OAChBA,gBAAcC;AA/Ff,IA+FeA,AACdA;AAhGD,IAgGCA,AACAA;AAjGD,IAiGCA,AACAA;AAlGD,IAkGCA,AACAA;AAnGD,IAmGCA,AACAA;AApGD,IAoGCA,AACAA;AArGD,IAqGCA,AACAA;AAtGD,IAsGCA,AAAUD,IACVA,YACAA,sBACAA,6DACAA,qFAAmFE,oBAAqBF,GAACE,eAAgBF,qDACzHA,cACAA,iEACAA,0FAAwFE,oBAAqBF,GAACE,eAAgBF,qDAC9HA,cACAA,oCACAA,8EAA4EE,oBAAqBF,GAACE,eAAgBF,0BAClHA,aACAA,WACAA,WACAA,mCACAA,OACAA;AAtHD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","file":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","sourceRoot":"/Users/vedmalex/work/fte2/demo","sourcesContent":["<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"],"template":{"version":"1.0.0","segments":[{"generatedLine":1,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":2,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":3,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":4,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":5,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":6,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":7,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":8,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":9,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":10,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":11,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":12,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":13,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":14,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":15,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":16,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":17,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":18,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":19,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":20,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":21,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":22,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":23,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":24,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":25,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":26,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":27,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":28,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":29,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":30,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":31,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":32,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":33,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":34,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":35,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":36,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":37,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":38,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":39,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":40,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":41,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":42,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":43,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":44,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":45,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":46,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":47,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":48,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":49,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":50,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":51,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":52,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":53,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":54,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":55,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":56,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":57,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":58,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":59,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":60,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":61,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":62,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":63,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":64,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":65,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":66,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":67,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":68,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":69,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":70,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":71,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":72,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":73,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":74,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":75,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":76,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":77,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":78,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":79,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":80,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":81,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":82,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":83,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":84,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":85,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":86,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":87,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":88,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":89,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":90,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":91,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":92,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":93,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":94,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":95,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":96,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":97,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":98,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":99,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":100,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":101,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":102,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":103,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":104,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":105,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":106,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":107,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":108,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":109,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":110,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":111,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":112,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":113,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":114,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":115,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":116,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":117,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":118,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":119,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":120,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":121,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":122,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":123,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":124,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":125,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":126,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":127,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":128,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":129,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":130,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":131,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":132,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":133,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":134,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":135,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":136,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":137,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":138,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":139,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":140,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":141,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":142,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":143,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":144,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":145,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":146,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":147,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":148,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":149,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":150,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":151,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":152,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js"},{"generatedLine":8,"generatedColumn":4,"originalLine":1,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":8,"generatedColumn":8,"originalLine":2,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":9,"generatedColumn":4,"originalLine":2,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":9,"generatedColumn":4,"originalLine":3,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":10,"generatedColumn":4,"originalLine":3,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":10,"generatedColumn":4,"originalLine":4,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":11,"generatedColumn":4,"originalLine":4,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":11,"generatedColumn":4,"originalLine":5,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":12,"generatedColumn":4,"originalLine":5,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":12,"generatedColumn":4,"originalLine":6,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":4,"originalLine":6,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":4,"originalLine":7,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":14,"generatedColumn":4,"originalLine":7,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":14,"generatedColumn":4,"originalLine":8,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":15,"generatedColumn":4,"originalLine":8,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":15,"generatedColumn":4,"originalLine":9,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":4,"originalLine":9,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":4,"originalLine":9,"originalColumn":3,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":35,"originalLine":9,"originalColumn":32,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":55,"originalLine":9,"originalColumn":53,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":63,"originalLine":9,"originalColumn":59,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":78,"originalLine":9,"originalColumn":75,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":86,"originalLine":10,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":104,"originalLine":10,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":129,"originalLine":10,"originalColumn":43,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":135,"originalLine":11,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":153,"originalLine":11,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":171,"originalLine":11,"originalColumn":36,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":177,"originalLine":12,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":224,"originalLine":13,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":243,"originalLine":13,"originalColumn":18,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":264,"originalLine":13,"originalColumn":40,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":274,"originalLine":14,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":309,"originalLine":14,"originalColumn":34,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":329,"originalLine":14,"originalColumn":55,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":332,"originalLine":14,"originalColumn":56,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":347,"originalLine":14,"originalColumn":72,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":354,"originalLine":15,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":377,"originalLine":16,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":397,"originalLine":17,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":410,"originalLine":17,"originalColumn":12,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":431,"originalLine":17,"originalColumn":34,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":437,"originalLine":18,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":17,"generatedColumn":4,"originalLine":18,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":17,"generatedColumn":4,"originalLine":18,"originalColumn":33,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":17,"generatedColumn":8,"originalLine":19,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":17,"generatedColumn":29,"originalLine":20,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":17,"generatedColumn":41,"originalLine":20,"originalColumn":11,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":17,"generatedColumn":69,"originalLine":20,"originalColumn":40,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":17,"generatedColumn":75,"originalLine":21,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":17,"generatedColumn":85,"originalLine":21,"originalColumn":9,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":17,"generatedColumn":111,"originalLine":21,"originalColumn":36,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":17,"generatedColumn":117,"originalLine":22,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":17,"generatedColumn":137,"originalLine":22,"originalColumn":19,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":17,"generatedColumn":173,"originalLine":22,"originalColumn":56,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":17,"generatedColumn":179,"originalLine":23,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":17,"generatedColumn":197,"originalLine":23,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":17,"generatedColumn":231,"originalLine":23,"originalColumn":52,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":17,"generatedColumn":237,"originalLine":24,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":17,"generatedColumn":245,"originalLine":25,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":18,"generatedColumn":4,"originalLine":25,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":18,"generatedColumn":4,"originalLine":25,"originalColumn":8,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":18,"generatedColumn":8,"originalLine":26,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":18,"generatedColumn":12,"originalLine":27,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":18,"generatedColumn":27,"originalLine":27,"originalColumn":14,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":18,"generatedColumn":47,"originalLine":27,"originalColumn":35,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":18,"generatedColumn":62,"originalLine":27,"originalColumn":51,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":18,"generatedColumn":68,"originalLine":28,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":18,"generatedColumn":102,"originalLine":28,"originalColumn":33,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":18,"generatedColumn":122,"originalLine":28,"originalColumn":54,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":18,"generatedColumn":125,"originalLine":28,"originalColumn":55,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":18,"generatedColumn":140,"originalLine":28,"originalColumn":71,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":18,"generatedColumn":146,"originalLine":29,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":18,"generatedColumn":163,"originalLine":30,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":18,"generatedColumn":189,"originalLine":31,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":18,"generatedColumn":216,"originalLine":32,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":18,"generatedColumn":238,"originalLine":33,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":18,"generatedColumn":246,"originalLine":34,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":18,"generatedColumn":279,"originalLine":35,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":18,"generatedColumn":359,"originalLine":35,"originalColumn":79,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":18,"generatedColumn":379,"originalLine":35,"originalColumn":100,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":18,"generatedColumn":382,"originalLine":35,"originalColumn":101,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":18,"generatedColumn":397,"originalLine":35,"originalColumn":117,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":18,"generatedColumn":423,"originalLine":36,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":18,"generatedColumn":447,"originalLine":37,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":18,"generatedColumn":465,"originalLine":38,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":18,"generatedColumn":478,"originalLine":39,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":18,"generatedColumn":503,"originalLine":40,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":18,"generatedColumn":557,"originalLine":41,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":18,"generatedColumn":583,"originalLine":42,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":18,"generatedColumn":597,"originalLine":43,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":18,"generatedColumn":610,"originalLine":44,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":18,"generatedColumn":636,"originalLine":45,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":18,"generatedColumn":690,"originalLine":46,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":18,"generatedColumn":716,"originalLine":47,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":18,"generatedColumn":730,"originalLine":48,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":18,"generatedColumn":740,"originalLine":48,"originalColumn":9,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":19,"generatedColumn":4,"originalLine":48,"originalColumn":9,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":19,"generatedColumn":4,"originalLine":49,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":20,"generatedColumn":4,"originalLine":49,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":20,"generatedColumn":4,"originalLine":50,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":21,"generatedColumn":4,"originalLine":50,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":21,"generatedColumn":4,"originalLine":51,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":22,"generatedColumn":4,"originalLine":51,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":22,"generatedColumn":4,"originalLine":52,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":23,"generatedColumn":4,"originalLine":52,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":23,"generatedColumn":4,"originalLine":53,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":24,"generatedColumn":4,"originalLine":53,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":24,"generatedColumn":4,"originalLine":54,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":25,"generatedColumn":4,"originalLine":54,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":25,"generatedColumn":4,"originalLine":55,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":26,"generatedColumn":4,"originalLine":55,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":26,"generatedColumn":4,"originalLine":56,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":27,"generatedColumn":4,"originalLine":56,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":27,"generatedColumn":4,"originalLine":57,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":28,"generatedColumn":4,"originalLine":57,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":28,"generatedColumn":4,"originalLine":58,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":29,"generatedColumn":4,"originalLine":58,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":29,"generatedColumn":4,"originalLine":59,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":30,"generatedColumn":4,"originalLine":59,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":30,"generatedColumn":4,"originalLine":60,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":31,"generatedColumn":4,"originalLine":60,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":31,"generatedColumn":4,"originalLine":60,"originalColumn":21,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":31,"generatedColumn":8,"originalLine":61,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":31,"generatedColumn":57,"originalLine":61,"originalColumn":48,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":31,"generatedColumn":77,"originalLine":61,"originalColumn":69,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":31,"generatedColumn":80,"originalLine":61,"originalColumn":70,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":31,"generatedColumn":95,"originalLine":61,"originalColumn":86,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":31,"generatedColumn":101,"originalLine":61,"originalColumn":90,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":31,"generatedColumn":124,"originalLine":61,"originalColumn":114,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":31,"generatedColumn":128,"originalLine":61,"originalColumn":116,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":31,"generatedColumn":143,"originalLine":61,"originalColumn":132,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":31,"generatedColumn":150,"originalLine":62,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":31,"generatedColumn":168,"originalLine":62,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":32,"generatedColumn":4,"originalLine":62,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":32,"generatedColumn":4,"originalLine":63,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":33,"generatedColumn":4,"originalLine":63,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":33,"generatedColumn":4,"originalLine":64,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":34,"generatedColumn":4,"originalLine":64,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":34,"generatedColumn":4,"originalLine":65,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":35,"generatedColumn":4,"originalLine":65,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":35,"generatedColumn":4,"originalLine":66,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":36,"generatedColumn":4,"originalLine":66,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":36,"generatedColumn":4,"originalLine":67,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":37,"generatedColumn":4,"originalLine":67,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":37,"generatedColumn":4,"originalLine":67,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":37,"generatedColumn":8,"originalLine":68,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":37,"generatedColumn":56,"originalLine":68,"originalColumn":47,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":37,"generatedColumn":76,"originalLine":68,"originalColumn":68,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":37,"generatedColumn":79,"originalLine":68,"originalColumn":69,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":37,"generatedColumn":94,"originalLine":68,"originalColumn":85,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":37,"generatedColumn":100,"originalLine":68,"originalColumn":89,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":37,"generatedColumn":116,"originalLine":68,"originalColumn":106,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":37,"generatedColumn":124,"originalLine":69,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":37,"generatedColumn":142,"originalLine":69,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":38,"generatedColumn":4,"originalLine":69,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":38,"generatedColumn":4,"originalLine":70,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":39,"generatedColumn":4,"originalLine":70,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":39,"generatedColumn":4,"originalLine":71,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":40,"generatedColumn":4,"originalLine":71,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":40,"generatedColumn":4,"originalLine":71,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":40,"generatedColumn":11,"originalLine":72,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":40,"generatedColumn":27,"originalLine":72,"originalColumn":15,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":41,"generatedColumn":4,"originalLine":72,"originalColumn":15,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":41,"generatedColumn":4,"originalLine":73,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":42,"generatedColumn":4,"originalLine":73,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":42,"generatedColumn":4,"originalLine":74,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":43,"generatedColumn":4,"originalLine":74,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":43,"generatedColumn":4,"originalLine":75,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":44,"generatedColumn":4,"originalLine":75,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":44,"generatedColumn":4,"originalLine":76,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":45,"generatedColumn":4,"originalLine":76,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":45,"generatedColumn":4,"originalLine":77,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":46,"generatedColumn":4,"originalLine":77,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":46,"generatedColumn":4,"originalLine":78,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":47,"generatedColumn":4,"originalLine":78,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":47,"generatedColumn":4,"originalLine":79,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":48,"generatedColumn":4,"originalLine":79,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":48,"generatedColumn":4,"originalLine":80,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":49,"generatedColumn":4,"originalLine":80,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":49,"generatedColumn":4,"originalLine":81,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":50,"generatedColumn":4,"originalLine":81,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":50,"generatedColumn":4,"originalLine":82,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":51,"generatedColumn":4,"originalLine":82,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":51,"generatedColumn":4,"originalLine":83,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":52,"generatedColumn":4,"originalLine":83,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":52,"generatedColumn":4,"originalLine":84,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":53,"generatedColumn":4,"originalLine":84,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":53,"generatedColumn":4,"originalLine":84,"originalColumn":21,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":53,"generatedColumn":8,"originalLine":85,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":53,"generatedColumn":57,"originalLine":85,"originalColumn":48,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":53,"generatedColumn":77,"originalLine":85,"originalColumn":69,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":53,"generatedColumn":80,"originalLine":85,"originalColumn":70,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":53,"generatedColumn":95,"originalLine":85,"originalColumn":86,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":53,"generatedColumn":101,"originalLine":85,"originalColumn":90,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":53,"generatedColumn":124,"originalLine":85,"originalColumn":114,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":53,"generatedColumn":128,"originalLine":85,"originalColumn":116,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":53,"generatedColumn":143,"originalLine":85,"originalColumn":132,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":53,"generatedColumn":150,"originalLine":86,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":53,"generatedColumn":168,"originalLine":86,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":54,"generatedColumn":4,"originalLine":86,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":54,"generatedColumn":4,"originalLine":87,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":55,"generatedColumn":4,"originalLine":87,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":55,"generatedColumn":4,"originalLine":88,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":56,"generatedColumn":4,"originalLine":88,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":56,"generatedColumn":4,"originalLine":89,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":57,"generatedColumn":4,"originalLine":89,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":57,"generatedColumn":4,"originalLine":90,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":58,"generatedColumn":4,"originalLine":90,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":58,"generatedColumn":4,"originalLine":91,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":59,"generatedColumn":4,"originalLine":91,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":59,"generatedColumn":4,"originalLine":91,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":59,"generatedColumn":8,"originalLine":92,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":59,"generatedColumn":56,"originalLine":92,"originalColumn":47,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":59,"generatedColumn":76,"originalLine":92,"originalColumn":68,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":59,"generatedColumn":79,"originalLine":92,"originalColumn":69,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":59,"generatedColumn":94,"originalLine":92,"originalColumn":85,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":59,"generatedColumn":100,"originalLine":92,"originalColumn":89,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":59,"generatedColumn":116,"originalLine":92,"originalColumn":106,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":59,"generatedColumn":124,"originalLine":93,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":59,"generatedColumn":142,"originalLine":93,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":60,"generatedColumn":4,"originalLine":93,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":60,"generatedColumn":4,"originalLine":94,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":61,"generatedColumn":4,"originalLine":94,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":61,"generatedColumn":4,"originalLine":95,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":62,"generatedColumn":4,"originalLine":95,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":62,"generatedColumn":4,"originalLine":95,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":62,"generatedColumn":11,"originalLine":96,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":62,"generatedColumn":27,"originalLine":96,"originalColumn":15,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":63,"generatedColumn":4,"originalLine":96,"originalColumn":15,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":63,"generatedColumn":4,"originalLine":97,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":64,"generatedColumn":4,"originalLine":97,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":64,"generatedColumn":4,"originalLine":98,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":65,"generatedColumn":4,"originalLine":98,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":65,"generatedColumn":4,"originalLine":99,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":66,"generatedColumn":4,"originalLine":99,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":66,"generatedColumn":4,"originalLine":100,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":67,"generatedColumn":4,"originalLine":100,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":67,"generatedColumn":4,"originalLine":101,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":68,"generatedColumn":4,"originalLine":101,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":68,"generatedColumn":4,"originalLine":102,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":69,"generatedColumn":4,"originalLine":102,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":69,"generatedColumn":4,"originalLine":103,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":70,"generatedColumn":4,"originalLine":103,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":70,"generatedColumn":4,"originalLine":103,"originalColumn":11,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":70,"generatedColumn":8,"originalLine":104,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":70,"generatedColumn":20,"originalLine":105,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":70,"generatedColumn":42,"originalLine":106,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":70,"generatedColumn":103,"originalLine":107,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":70,"generatedColumn":188,"originalLine":107,"originalColumn":84,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":70,"generatedColumn":208,"originalLine":107,"originalColumn":105,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":70,"generatedColumn":211,"originalLine":107,"originalColumn":106,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":70,"generatedColumn":226,"originalLine":107,"originalColumn":122,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":70,"generatedColumn":279,"originalLine":108,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":70,"generatedColumn":293,"originalLine":109,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":70,"generatedColumn":358,"originalLine":110,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":70,"generatedColumn":448,"originalLine":110,"originalColumn":89,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":70,"generatedColumn":468,"originalLine":110,"originalColumn":110,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":70,"generatedColumn":471,"originalLine":110,"originalColumn":111,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":70,"generatedColumn":486,"originalLine":110,"originalColumn":127,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":70,"generatedColumn":539,"originalLine":111,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":70,"generatedColumn":553,"originalLine":112,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":70,"generatedColumn":589,"originalLine":113,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":70,"generatedColumn":667,"originalLine":113,"originalColumn":77,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":70,"generatedColumn":687,"originalLine":113,"originalColumn":98,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":70,"generatedColumn":690,"originalLine":113,"originalColumn":99,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":70,"generatedColumn":705,"originalLine":113,"originalColumn":115,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":70,"generatedColumn":731,"originalLine":114,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":70,"generatedColumn":744,"originalLine":115,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":70,"generatedColumn":755,"originalLine":116,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":70,"generatedColumn":766,"originalLine":117,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":70,"generatedColumn":801,"originalLine":118,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":70,"generatedColumn":808,"originalLine":119,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.View.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n\n  const smartSort = context.smartSort\n  const fieldsets = context.fieldset\n  const inFieldset = context.inFieldset\n\n#>Ext.define('Modeleditor.view.#{context.$namespace}.View.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}view',\n  // iconCls: _r('iconCls', '', '#{context.$namespace}.#{context.$name}'),\n  layout: 'column',\n  border: false,\n  widget: '#{context.$widgetName}',\n<#- if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n<#- }#>\n\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n  initComponent: function() {\n    DirectCacheLogger.userStories('View Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id','SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n\n        function builItems(items) {\n          const fiit = items.filter(i=>i.type != 'fieldset')\n          const fsit = items.filter(i=>i.type == 'fieldset')\n          for( let i = 0; i< fiit.length; i +=1){\n            const item = fiit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n          for( let i = 0; i< fsit.length; i +=1){\n            const item = fsit[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['viewfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`],\n                <#- }\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([\n                <#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n        builItems(context.formItems)\n        #>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('View Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        render: function(form) {\n          DirectCacheLogger.userStories('View Form Render', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"}]}}