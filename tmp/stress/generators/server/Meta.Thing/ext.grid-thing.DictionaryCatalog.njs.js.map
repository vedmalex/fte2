{"version":3,"sources":["generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"],"names":["code","text","expression"],"mappings":"AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IACCA;AADD,IACCA,AACAA;AAFD,IAECA,AACAA;AAHD,IAGCA,AACAA;AAJD,IAICA,AACAA;AALD,IAKCA,AACAA;AAND,IAMCA,AACAA;AAPD,IAOCA,AACAA;AARD,IAQCA,AACAC,+BAA6BC,mBAAoBD,qBAAmBC,eAAgBD,OACpFA,kBAAgBC,oBAAqBD,GAACC,eAAgBD,MACtDA,kBAAgBC,kBAAmBD,MACnCA,+CACAA,mBAAiBC,qBAAsBD,aACvCA,oCACAA,mCAAiCC,oBAAqBD,GAACC,eAAgBD,KAAGD;AAf3E,IAe2EA,AAAwBC,OAAIC,iBAAkBD,IAACD;AAf1H,IAe0HA,AAAKC,MAC9HA,iBACAA,gCACAA,sBACAA,yFAAuFC,oBAAqBD,GAACC,eAAgBD,6BAC7HA,YACAA,qCACAA,gCACAA,8CACAA,mCACAA,YACAA,uGAAqGC,mBAAoBD,WAASC,eAAgBD,MAClJA,IACAA,wBACAA,2EACMD;AA9BP,IA8BOA,AAA4DC,IAClEA,aACAA,iCACAA,sCACAA,kCACAA,uCACAA,uCACAA,WACMD;AAtCP,IAsCOA,AAAOC,IACbA,YACAA,gBACAA,wCACAA,aACAA,yCACAA,aACAA,wBACAA,qFACAA,2BACAA,0BACID;AAjDL,IAiDKA,AAAyCC,IAC7CA,mEACAA,sFACAA,qCACAA,kBACAA,8BACAA,6DACAA,4CACAA,UACID;AA1DL,IA0DKA,AAAOC,IACXA,sBACAA,6CACAA,+FAA6FC,oBAAqBD,GAACC,eAAgBD,2DACnIA,8BACAA,uEACAA,4DACAA,cACAA,sDACAA,iGAA+FC,oBAAqBD,GAACC,eAAgBD,4DACrIA,cACAA,yEACAA,kGAAgGC,oBAAqBD,GAACC,eAAgBD,qEACtIA,aACAA,YACAA,IACAA,qBACAA,mCACAA,sBACAA,YACAD;AA9ED,IA8ECA,AACAA;AA/ED,IA+ECA,AACAA;AAhFD,IAgFCA,AACAA;AAjFD,IAiFCA,AACAA;AAlFD,IAkFCA,AAAmGC,IACnGA,yCAAuCC,oBAAqBD,GAACC,eAAgBD,aAAWC,uBAAwBD,IAAEC,cAAeD,OACvHD;AApFX,IAoFWA,AACVA;AArFD,IAqFCA,AACAA;AAtFD,IAsFCA,AAAEC,IACFA,YACAA,WACAA,mCACAA,OACAA;AA3FD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","file":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","sourceRoot":"/Users/vedmalex/work/fte2/demo","sourcesContent":["<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"],"template":{"version":"1.0.0","segments":[{"generatedLine":1,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":2,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":3,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":4,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":5,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":6,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":7,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":8,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":9,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":10,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":11,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":12,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":13,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":14,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":15,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":16,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":17,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":18,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":19,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":20,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":21,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":22,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":23,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":24,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":25,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":26,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":27,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":28,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":29,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":30,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":31,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":32,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":33,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":34,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":35,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":36,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":37,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":38,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":39,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":40,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":41,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":42,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":43,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":44,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":45,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":46,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":47,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":48,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":49,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":50,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":51,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":52,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":53,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":54,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":55,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":56,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":57,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":58,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":59,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":60,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":61,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":62,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":63,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":64,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":65,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":66,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":67,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":68,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":69,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":70,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":71,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":72,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":73,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":74,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":75,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":76,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":77,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":78,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":79,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":80,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":81,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":82,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":83,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":84,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":85,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":86,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":87,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":88,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":89,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":90,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":91,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":92,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":93,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":94,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":95,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":96,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":97,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":98,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":99,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":100,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":101,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":102,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":103,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":104,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":105,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":106,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":107,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":108,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":109,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":110,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":111,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":112,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":113,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":114,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":115,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":116,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":117,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js"},{"generatedLine":8,"generatedColumn":4,"originalLine":2,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":9,"generatedColumn":4,"originalLine":2,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":9,"generatedColumn":4,"originalLine":3,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":10,"generatedColumn":4,"originalLine":3,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":10,"generatedColumn":4,"originalLine":4,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":11,"generatedColumn":4,"originalLine":4,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":11,"generatedColumn":4,"originalLine":5,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":12,"generatedColumn":4,"originalLine":5,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":12,"generatedColumn":4,"originalLine":6,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":4,"originalLine":6,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":4,"originalLine":7,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":14,"generatedColumn":4,"originalLine":7,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":14,"generatedColumn":4,"originalLine":8,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":15,"generatedColumn":4,"originalLine":8,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":15,"generatedColumn":4,"originalLine":9,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":4,"originalLine":9,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":4,"originalLine":10,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":35,"originalLine":10,"originalColumn":30,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":54,"originalLine":10,"originalColumn":50,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":75,"originalLine":10,"originalColumn":69,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":90,"originalLine":10,"originalColumn":85,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":97,"originalLine":11,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":115,"originalLine":11,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":135,"originalLine":11,"originalColumn":38,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":138,"originalLine":11,"originalColumn":39,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":153,"originalLine":11,"originalColumn":55,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":159,"originalLine":12,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":177,"originalLine":12,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":195,"originalLine":12,"originalColumn":36,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":201,"originalLine":13,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":248,"originalLine":14,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":267,"originalLine":14,"originalColumn":18,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":288,"originalLine":14,"originalColumn":40,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":301,"originalLine":15,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":337,"originalLine":16,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":372,"originalLine":16,"originalColumn":34,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":392,"originalLine":16,"originalColumn":55,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":395,"originalLine":16,"originalColumn":56,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":410,"originalLine":16,"originalColumn":72,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":415,"originalLine":16,"originalColumn":75,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":17,"generatedColumn":4,"originalLine":16,"originalColumn":75,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":17,"generatedColumn":4,"originalLine":16,"originalColumn":99,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":17,"generatedColumn":11,"originalLine":16,"originalColumn":103,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":17,"generatedColumn":28,"originalLine":16,"originalColumn":121,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":17,"generatedColumn":32,"originalLine":16,"originalColumn":122,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":18,"generatedColumn":4,"originalLine":16,"originalColumn":122,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":18,"generatedColumn":4,"originalLine":16,"originalColumn":127,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":18,"generatedColumn":10,"originalLine":17,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":18,"generatedColumn":27,"originalLine":18,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":18,"generatedColumn":59,"originalLine":19,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":18,"generatedColumn":81,"originalLine":20,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":18,"generatedColumn":170,"originalLine":20,"originalColumn":88,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":18,"generatedColumn":190,"originalLine":20,"originalColumn":109,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":18,"generatedColumn":193,"originalLine":20,"originalColumn":110,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":18,"generatedColumn":208,"originalLine":20,"originalColumn":126,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":18,"generatedColumn":237,"originalLine":21,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":18,"generatedColumn":249,"originalLine":22,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":18,"generatedColumn":286,"originalLine":23,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":18,"generatedColumn":318,"originalLine":24,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":18,"generatedColumn":364,"originalLine":25,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":18,"generatedColumn":399,"originalLine":26,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":18,"generatedColumn":411,"originalLine":27,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":18,"generatedColumn":514,"originalLine":27,"originalColumn":102,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":18,"generatedColumn":533,"originalLine":27,"originalColumn":122,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":18,"generatedColumn":544,"originalLine":27,"originalColumn":131,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":18,"generatedColumn":559,"originalLine":27,"originalColumn":147,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":18,"generatedColumn":565,"originalLine":28,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":18,"generatedColumn":569,"originalLine":29,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":18,"generatedColumn":593,"originalLine":30,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":18,"generatedColumn":668,"originalLine":31,"originalColumn":7,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":19,"generatedColumn":4,"originalLine":31,"originalColumn":7,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":19,"generatedColumn":4,"originalLine":31,"originalColumn":67,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":19,"generatedColumn":8,"originalLine":32,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":19,"generatedColumn":21,"originalLine":33,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":19,"generatedColumn":54,"originalLine":34,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":19,"generatedColumn":92,"originalLine":35,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":19,"generatedColumn":126,"originalLine":36,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":19,"generatedColumn":165,"originalLine":37,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":19,"generatedColumn":204,"originalLine":38,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":19,"generatedColumn":215,"originalLine":39,"originalColumn":7,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":20,"generatedColumn":4,"originalLine":39,"originalColumn":7,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":20,"generatedColumn":4,"originalLine":39,"originalColumn":14,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":20,"generatedColumn":8,"originalLine":40,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":20,"generatedColumn":20,"originalLine":41,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":20,"generatedColumn":36,"originalLine":42,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":20,"generatedColumn":76,"originalLine":43,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":20,"generatedColumn":89,"originalLine":44,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":20,"generatedColumn":130,"originalLine":45,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":20,"generatedColumn":143,"originalLine":46,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":20,"generatedColumn":167,"originalLine":47,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":20,"generatedColumn":252,"originalLine":48,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":20,"generatedColumn":279,"originalLine":49,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":20,"generatedColumn":305,"originalLine":50,"originalColumn":5,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":21,"generatedColumn":4,"originalLine":50,"originalColumn":5,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":21,"generatedColumn":4,"originalLine":50,"originalColumn":46,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":21,"generatedColumn":8,"originalLine":51,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":21,"generatedColumn":75,"originalLine":52,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":21,"generatedColumn":161,"originalLine":53,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":21,"generatedColumn":198,"originalLine":54,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":21,"generatedColumn":216,"originalLine":55,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":21,"generatedColumn":246,"originalLine":56,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":21,"generatedColumn":307,"originalLine":57,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":21,"generatedColumn":351,"originalLine":58,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":21,"generatedColumn":361,"originalLine":59,"originalColumn":5,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":22,"generatedColumn":4,"originalLine":59,"originalColumn":5,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":22,"generatedColumn":4,"originalLine":59,"originalColumn":12,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":22,"generatedColumn":8,"originalLine":60,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":22,"generatedColumn":30,"originalLine":61,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":22,"generatedColumn":75,"originalLine":62,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":22,"generatedColumn":170,"originalLine":62,"originalColumn":94,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":22,"generatedColumn":190,"originalLine":62,"originalColumn":115,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":22,"generatedColumn":193,"originalLine":62,"originalColumn":116,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":22,"generatedColumn":208,"originalLine":62,"originalColumn":132,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":22,"generatedColumn":267,"originalLine":63,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":22,"generatedColumn":297,"originalLine":64,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":22,"generatedColumn":368,"originalLine":65,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":22,"generatedColumn":428,"originalLine":66,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":22,"generatedColumn":442,"originalLine":67,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":22,"generatedColumn":496,"originalLine":68,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":22,"generatedColumn":593,"originalLine":68,"originalColumn":96,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":22,"generatedColumn":613,"originalLine":68,"originalColumn":117,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":22,"generatedColumn":616,"originalLine":68,"originalColumn":118,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":22,"generatedColumn":631,"originalLine":68,"originalColumn":134,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":22,"generatedColumn":691,"originalLine":69,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":22,"generatedColumn":705,"originalLine":70,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":22,"generatedColumn":778,"originalLine":71,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":22,"generatedColumn":876,"originalLine":71,"originalColumn":97,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":22,"generatedColumn":896,"originalLine":71,"originalColumn":118,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":22,"generatedColumn":899,"originalLine":71,"originalColumn":119,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":22,"generatedColumn":914,"originalLine":71,"originalColumn":135,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":22,"generatedColumn":983,"originalLine":72,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":22,"generatedColumn":996,"originalLine":73,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":22,"generatedColumn":1008,"originalLine":74,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":22,"generatedColumn":1012,"originalLine":75,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":22,"generatedColumn":1033,"originalLine":76,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":22,"generatedColumn":1068,"originalLine":77,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":22,"generatedColumn":1090,"originalLine":78,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":22,"generatedColumn":1102,"originalLine":79,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":23,"generatedColumn":4,"originalLine":79,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":23,"generatedColumn":4,"originalLine":80,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":24,"generatedColumn":4,"originalLine":80,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":24,"generatedColumn":4,"originalLine":81,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":25,"generatedColumn":4,"originalLine":81,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":25,"generatedColumn":4,"originalLine":82,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":26,"generatedColumn":4,"originalLine":82,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":26,"generatedColumn":4,"originalLine":83,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":27,"generatedColumn":4,"originalLine":83,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":27,"generatedColumn":4,"originalLine":83,"originalColumn":100,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":27,"generatedColumn":8,"originalLine":84,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":27,"generatedColumn":49,"originalLine":84,"originalColumn":40,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":27,"generatedColumn":69,"originalLine":84,"originalColumn":61,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":27,"generatedColumn":72,"originalLine":84,"originalColumn":62,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":27,"generatedColumn":87,"originalLine":84,"originalColumn":78,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":27,"generatedColumn":100,"originalLine":84,"originalColumn":89,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":27,"generatedColumn":123,"originalLine":84,"originalColumn":113,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":27,"generatedColumn":127,"originalLine":84,"originalColumn":115,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":27,"generatedColumn":141,"originalLine":84,"originalColumn":130,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":27,"generatedColumn":148,"originalLine":85,"originalColumn":11,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":28,"generatedColumn":4,"originalLine":85,"originalColumn":11,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":28,"generatedColumn":4,"originalLine":86,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":29,"generatedColumn":4,"originalLine":86,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":29,"generatedColumn":4,"originalLine":87,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":30,"generatedColumn":4,"originalLine":87,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":30,"generatedColumn":4,"originalLine":87,"originalColumn":3,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":30,"generatedColumn":8,"originalLine":88,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":30,"generatedColumn":20,"originalLine":89,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":30,"generatedColumn":31,"originalLine":90,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":30,"generatedColumn":66,"originalLine":91,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":30,"generatedColumn":73,"originalLine":92,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.DictionaryCatalog.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n  const hasDictionaryFields = properties.filter(p=>p.forDictionary).length > 0\n\n-#>\nExt.define('Modeleditor.view.#{context.namespace}.DictionaryCatalog.#{context.$name}',{\n  serverModel: '#{context.$namespace}.#{context.$name}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}catalog',\n  itemId: \"DictionaryCatalog\",\n  //iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  btns: true,\n  initComponent: function(){\n    let me = this;\n    DirectCacheLogger.userStories('Dictionary Catalog Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id });\n    // {\n    //   catalogPaginator: false,\n    //   catalogPlugins: [],\n    //   catalogStore: customFieldsetStore\n    //   catalogBbar: undefined\n    // }\n    const store = me.hasOwnProperty('catalogStore') ? me.catalogStore: Ext.create('Modeleditor.store.#{context.namespace}.Catalog.#{context.$name}')\n\n    Ext.apply(this,{\n      plugins: me.hasOwnProperty('catalogPlugins') ? me.catalogPlugins: [\n      <#- if(config.filterForDicCatalog && hasDictionaryFields){#>\n        {\n          ptype: 'filterbar',\n          pluginId: \"filterbar\",\n          renderHidden: false,\n          showShowHideButton: true,\n          showClearAllButton: true,\n        }\n      <#- }#>\n      ],\n      store,\n      tbar: (this.btns === true) ? [\n        {\n          xtype: \"basecreatebutton\"\n        }\n      ] : undefined,\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n    <#- if(config.pageSizeEmbedded !== -1){#>\n      bbar: me.hasOwnProperty('catalogBbar') ? me.catalogBbar :\n      me.hasOwnProperty('catalogPaginator') && !me.catalogPaginator ? undefined: {\n        xtype: \"pagingtoolbar\",\n        store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      listeners: {\n        filterupdated: function(filters){\n          DirectCacheLogger.userStories('Dictionary Catalog Filter Updated', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, filtersCount: filters.length });\n          let grid = this;\n          if(grid.defaultFilters && grid.defaultFilters.length > 0)\n            grid.getStore().filter(grid.defaultFilters);\n        },\n        selectionchange: function(view, records) {\n          DirectCacheLogger.userStories('Dictionary Catalog Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, selectedCount: records.length });\n        },\n        itemdblclick: function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Dictionary Catalog Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', catalogId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n\n      columns: [{\n          xtype: 'rownumberer',\n          width:40\n        },\n<#-\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated  && ((hasDictionaryFields && g.forDictionary) || !hasDictionaryFields)){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#- }\n        }\n#>\n      ],\n    });\n    this.callParent(arguments);\n  }\n});\n"}]}}